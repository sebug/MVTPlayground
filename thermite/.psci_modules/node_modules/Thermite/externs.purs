module Thermite where
import Thermite ()
import Prim ()
import Prelude ()
import DOM ()
import Data.Function ()
import Control.Monad.Eff ()
import Thermite.Html ()
foreign import data ComponentClass :: * -> # ! -> *
type SpecRecord (eff :: # !) (state :: *) (props :: *) (action :: *) = { render :: Thermite.Render state props action, performAction :: Thermite.PerformAction state props action eff, initialState :: state }
newtype Spec (eff :: # !) (state :: *) (props :: *) (action :: *) = Spec (Thermite.SpecRecord eff state props action)
type Render (state :: *) (props :: *) (action :: *) = Data.Function.Fn3 (Thermite.Html.Context action) state props (Thermite.Html.Html action)
type PerformAction (state :: *) (props :: *) (action :: *) (eff :: # !) = Data.Function.Fn3 state props action (Thermite.Action eff state)
type Action (eff :: # !) (a :: *) = (a -> Control.Monad.Eff.Eff eff Prelude.Unit) -> Control.Monad.Eff.Eff eff Prelude.Unit
foreign import render :: forall props eff. Thermite.ComponentClass props eff -> props -> Control.Monad.Eff.Eff (dom :: DOM.DOM | eff) Prelude.Unit
foreign import createClass :: forall eff state props action. Thermite.Spec eff state props action -> Thermite.ComponentClass props eff
