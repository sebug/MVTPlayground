module Thermite.Action where
import Prelude ()
import Thermite.Internal ()
import Thermite.Action ()
import Prim ()
import Prelude ()
import Control.Monad.Eff ()
import Thermite.Types ()
import Thermite.Internal ()
data Action (eff :: # !) (state :: *) (a :: *)
foreign import asyncSetState :: forall eff state. ((state -> Control.Monad.Eff.Eff eff Prelude.Unit) -> Control.Monad.Eff.Eff eff Prelude.Unit) -> Thermite.Action.Action eff state Prelude.Unit
foreign import async :: forall eff state a. ((a -> Control.Monad.Eff.Eff eff Prelude.Unit) -> Control.Monad.Eff.Eff eff Prelude.Unit) -> Thermite.Action.Action eff state a
foreign import sync :: forall eff state a. Control.Monad.Eff.Eff eff a -> Thermite.Action.Action eff state a
foreign import modifyState :: forall eff state. (state -> state) -> Thermite.Action.Action eff state Prelude.Unit
foreign import setState :: forall eff state. state -> Thermite.Action.Action eff state Prelude.Unit
foreign import getState :: forall eff state. Thermite.Action.Action eff state state
foreign import runAction :: forall eff state props action a. Thermite.Types.Context state props action -> Thermite.Action.Action eff state a -> Control.Monad.Eff.Eff eff Prelude.Unit
foreign import instance functorAction :: Prelude.Functor (Thermite.Action.Action eff state)
foreign import instance applyAction :: Prelude.Apply (Thermite.Action.Action eff state)
foreign import instance applicativeAction :: Prelude.Applicative (Thermite.Action.Action eff state)
foreign import instance bindAction :: Prelude.Bind (Thermite.Action.Action eff state)
foreign import instance monadAction :: Prelude.Monad (Thermite.Action.Action eff state)
