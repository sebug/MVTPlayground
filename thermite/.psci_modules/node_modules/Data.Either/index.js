"use strict";
var Prelude = require("Prelude");
var Control_Alt = require("Control.Alt");
function Left(value0) {
    this.value0 = value0;
};
Left.create = function (value0) {
    return new Left(value0);
};
function Right(value0) {
    this.value0 = value0;
};
Right.create = function (value0) {
    return new Right(value0);
};
var showEither = function (__dict_Show_0) {
    return function (__dict_Show_1) {
        return new Prelude.Show(function (_47) {
            if (_47 instanceof Left) {
                return "Left (" + (Prelude.show(__dict_Show_0)(_47.value0) + ")");
            };
            if (_47 instanceof Right) {
                return "Right (" + (Prelude.show(__dict_Show_1)(_47.value0) + ")");
            };
            throw new Error("Failed pattern match");
        });
    };
};
var functorEither = new Prelude.Functor(function (_41) {
    return function (_42) {
        if (_42 instanceof Left) {
            return new Left(_42.value0);
        };
        if (_42 instanceof Right) {
            return new Right(_41(_42.value0));
        };
        throw new Error("Failed pattern match");
    };
});
var eqEither = function (__dict_Eq_4) {
    return function (__dict_Eq_5) {
        return new Prelude.Eq(function (a) {
            return function (b) {
                return !Prelude["=="](eqEither(__dict_Eq_4)(__dict_Eq_5))(a)(b);
            };
        }, function (_48) {
            return function (_49) {
                if (_48 instanceof Left && _49 instanceof Left) {
                    return Prelude["=="](__dict_Eq_4)(_48.value0)(_49.value0);
                };
                if (_48 instanceof Right && _49 instanceof Right) {
                    return Prelude["=="](__dict_Eq_5)(_48.value0)(_49.value0);
                };
                return false;
            };
        });
    };
};
var ordEither = function (__dict_Ord_2) {
    return function (__dict_Ord_3) {
        return new Prelude.Ord(function () {
            return eqEither(__dict_Ord_2["__superclass_Prelude.Eq_0"]())(__dict_Ord_3["__superclass_Prelude.Eq_0"]());
        }, function (_50) {
            return function (_51) {
                if (_50 instanceof Left && _51 instanceof Left) {
                    return Prelude.compare(__dict_Ord_2)(_50.value0)(_51.value0);
                };
                if (_50 instanceof Right && _51 instanceof Right) {
                    return Prelude.compare(__dict_Ord_3)(_50.value0)(_51.value0);
                };
                if (_50 instanceof Left) {
                    return Prelude.LT.value;
                };
                if (_51 instanceof Left) {
                    return Prelude.GT.value;
                };
                throw new Error("Failed pattern match");
            };
        });
    };
};
var either = function (_38) {
    return function (_39) {
        return function (_40) {
            if (_40 instanceof Left) {
                return _38(_40.value0);
            };
            if (_40 instanceof Right) {
                return _39(_40.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
};
var isLeft = either(Prelude["const"](true))(Prelude["const"](false));
var isRight = either(Prelude["const"](false))(Prelude["const"](true));
var applyEither = new Prelude.Apply(function (_43) {
    return function (_44) {
        if (_43 instanceof Left) {
            return new Left(_43.value0);
        };
        if (_43 instanceof Right) {
            return Prelude["<$>"](functorEither)(_43.value0)(_44);
        };
        throw new Error("Failed pattern match");
    };
}, function () {
    return functorEither;
});
var bindEither = new Prelude.Bind(either(function (e) {
    return function (_) {
        return new Left(e);
    };
})(function (a) {
    return function (f) {
        return f(a);
    };
}), function () {
    return applyEither;
});
var applicativeEither = new Prelude.Applicative(function () {
    return applyEither;
}, Right.create);
var monadEither = new Prelude.Monad(function () {
    return applicativeEither;
}, function () {
    return bindEither;
});
var altEither = new Control_Alt.Alt(function (_45) {
    return function (_46) {
        if (_45 instanceof Left) {
            return _46;
        };
        return _45;
    };
}, function () {
    return functorEither;
});
module.exports = {
    Left: Left, 
    Right: Right, 
    altEither: altEither, 
    applicativeEither: applicativeEither, 
    applyEither: applyEither, 
    bindEither: bindEither, 
    either: either, 
    eqEither: eqEither, 
    functorEither: functorEither, 
    isLeft: isLeft, 
    isRight: isRight, 
    monadEither: monadEither, 
    ordEither: ordEither, 
    showEither: showEither
};
