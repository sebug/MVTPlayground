module Control.Alternative where
import Prelude ()
import Control.Lazy ()
import Control.Alternative ()
import Prim ()
import Prelude ()
import Control.Alt ()
import Control.Lazy ()
import Control.Plus ()
class (Prelude.Applicative f, Control.Plus.Plus f) <= Alternative f where
foreign import many :: forall f a. (Control.Alternative.Alternative f, Control.Lazy.Lazy1 f) => f a -> f [a]
foreign import some :: forall f a. (Control.Alternative.Alternative f, Control.Lazy.Lazy1 f) => f a -> f [a]
