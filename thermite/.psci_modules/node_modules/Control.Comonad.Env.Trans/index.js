"use strict";
var Control_Comonad = require("Control.Comonad");
var Prelude = require("Prelude");
var Data_Tuple = require("Data.Tuple");
var Control_Extend = require("Control.Extend");
var Control_Comonad_Trans = require("Control.Comonad.Trans");
var EnvT = {
    create: function (value) {
        return value;
    }
};
var withEnvT = function (_189) {
    return function (_190) {
        return EnvT.create(new Data_Tuple.Tuple(_189(_190.value0), _190.value1));
    };
};
var runEnvT = function (_188) {
    return _188;
};
var mapEnvT = function (_191) {
    return function (_192) {
        return EnvT.create(new Data_Tuple.Tuple(_192.value0, _191(_192.value1)));
    };
};
var functorEnvT = function (__dict_Functor_0) {
    return new Prelude.Functor(function (_193) {
        return function (_194) {
            return EnvT.create(new Data_Tuple.Tuple(_194.value0, Prelude["<$>"](__dict_Functor_0)(_193)(_194.value1)));
        };
    });
};
var extendEnvT = function (__dict_Extend_1) {
    return new Control_Extend.Extend(function (_195) {
        return function (_196) {
            return EnvT.create(new Data_Tuple.Tuple(_196.value0, Prelude["<$>"](__dict_Extend_1["__superclass_Prelude.Functor_0"]())(_195)(Control_Extend["<<="](__dict_Extend_1)(Prelude[">>>"](Prelude.semigroupoidArr)(Data_Tuple.Tuple.create(_196.value0))(EnvT.create))(_196.value1))));
        };
    }, function () {
        return functorEnvT(__dict_Extend_1["__superclass_Prelude.Functor_0"]());
    });
};
var comonadTransEnvT = new Control_Comonad_Trans.ComonadTrans(function (__dict_Comonad_2) {
    return function (_198) {
        return _198.value1;
    };
});
var comonadEnvT = function (__dict_Comonad_3) {
    return new Control_Comonad.Comonad(function () {
        return extendEnvT(__dict_Comonad_3["__superclass_Control.Extend.Extend_0"]());
    }, function (_197) {
        return Control_Comonad.extract(__dict_Comonad_3)(_197.value1);
    });
};
module.exports = {
    EnvT: EnvT, 
    comonadEnvT: comonadEnvT, 
    comonadTransEnvT: comonadTransEnvT, 
    extendEnvT: extendEnvT, 
    functorEnvT: functorEnvT, 
    mapEnvT: mapEnvT, 
    runEnvT: runEnvT, 
    withEnvT: withEnvT
};
