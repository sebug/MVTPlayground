module Main where
import Thermite ()
import Main ()
import Thermite.Html.Elements ()
import Thermite.Html ()
import Thermite.Html.Attributes ()
import Thermite.Events ()
import Prelude ()
import API.User ()
import Thermite.Action ()
import Prim ()
import Prelude ()
import Debug.Trace ()
import Control.Monad.Eff ()
import Control.Monad.Cont.Trans ()
import API.User ()
import Thermite ()
import Thermite.Html ()
import Thermite.Html.Elements ()
import Thermite.Html.Attributes ()
import Thermite.Action ()
import Thermite.Events ()
import Thermite.Types ()
import Data.Either ()
data Action = SetFirstName Prim.String | SaveUser  | LoadUser 
type State = { firstName :: Prim.String }
foreign import main :: forall t98. Control.Monad.Eff.Eff (aj :: API.User.Ajax, dom :: DOM.DOM | t98) Prelude.Unit
foreign import initialState :: Main.State
foreign import handleChangeEvent :: Thermite.Events.FormEvent -> Main.Action
foreign import getValue :: forall event. event -> Prim.String
foreign import performAction :: forall t20. Thermite.Types.PerformAction Prelude.Unit Main.Action (Thermite.Action.Action (aj :: API.User.Ajax | t20) Main.State)
foreign import loadSetState :: forall eff. (Main.State -> Control.Monad.Eff.Eff (aj :: API.User.Ajax | eff) Prelude.Unit) -> Control.Monad.Eff.Eff (aj :: API.User.Ajax | eff) Prelude.Unit
foreign import render :: Thermite.Types.Render Main.State Prelude.Unit Main.Action
foreign import spec :: forall t78. Thermite.Types.Spec (Thermite.Action.Action (aj :: API.User.Ajax | t78) Main.State) Main.State Prelude.Unit Main.Action
