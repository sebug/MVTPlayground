"use strict";
var Prelude = require("Prelude");
var Data_Tuple = require("Data.Tuple");
var Data_Monoid = require("Data.Monoid");
var Control_Monad_Trans = require("Control.Monad.Trans");
var RWST = {
    create: function (value) {
        return value;
    }
};
var runRWST = function (_222) {
    return _222;
};
var withRWST = function (f) {
    return function (m) {
        return function (r) {
            return function (s) {
                return Data_Tuple.uncurry(runRWST(m))(f(r)(s));
            };
        };
    };
};
var mkSee = function (__dict_Monoid_2) {
    return function (s) {
        return function (a) {
            return function (w) {
                return {
                    state: s, 
                    result: a, 
                    log: w
                };
            };
        };
    };
};
var monadTransRWST = function (__dict_Monoid_3) {
    return new Control_Monad_Trans.MonadTrans(function (__dict_Monad_4) {
        return function (m) {
            return function (_) {
                return function (s) {
                    return Prelude[">>="](__dict_Monad_4["__superclass_Prelude.Bind_1"]())(m)(function (a) {
                        return Prelude["return"](__dict_Monad_4)(mkSee(__dict_Monoid_3)(s)(a)(Data_Monoid.mempty(__dict_Monoid_3)));
                    });
                };
            };
        };
    });
};
var mapRWST = function (f) {
    return function (m) {
        return function (r) {
            return function (s) {
                return f(runRWST(m)(r)(s));
            };
        };
    };
};
var functorRWST = function (__dict_Functor_5) {
    return new Prelude.Functor(function (f) {
        return function (m) {
            return function (r) {
                return function (s) {
                    return Prelude["<$>"](__dict_Functor_5)(function (see) {
                        var _719 = {};
                        for (var _720 in see) {
                            if (see.hasOwnProperty(_720)) {
                                _719[_720] = see[_720];
                            };
                        };
                        _719.result = f(see.result);
                        return _719;
                    })(runRWST(m)(r)(s));
                };
            };
        };
    });
};
var execRWST = function (__dict_Monad_6) {
    return function (m) {
        return function (r) {
            return function (s) {
                return Prelude[">>="](__dict_Monad_6["__superclass_Prelude.Bind_1"]())(runRWST(m)(r)(s))(function (see) {
                    return Prelude["return"](__dict_Monad_6)(new Data_Tuple.Tuple(see.state, see.log));
                });
            };
        };
    };
};
var evalRWST = function (__dict_Monad_7) {
    return function (m) {
        return function (r) {
            return function (s) {
                return Prelude[">>="](__dict_Monad_7["__superclass_Prelude.Bind_1"]())(runRWST(m)(r)(s))(function (see) {
                    return Prelude["return"](__dict_Monad_7)(new Data_Tuple.Tuple(see.result, see.log));
                });
            };
        };
    };
};
var applyRWST = function (__dict_Apply_10) {
    return function (__dict_Semigroup_11) {
        return new Prelude.Apply(function (f) {
            return function (m) {
                return function (r) {
                    return function (s) {
                        return Prelude["<*>"](__dict_Apply_10)(Prelude["<$>"](__dict_Apply_10["__superclass_Prelude.Functor_0"]())(function (_220) {
                            return function (see) {
                                var _722 = {};
                                for (var _723 in see) {
                                    if (see.hasOwnProperty(_723)) {
                                        _722[_723] = see[_723];
                                    };
                                };
                                _722.result = _220.result(see.result);
                                _722.log = Prelude["<>"](__dict_Semigroup_11)(_220.log)(see.log);
                                return _722;
                            };
                        })(runRWST(f)(r)(s)))(runRWST(m)(r)(s));
                    };
                };
            };
        }, function () {
            return functorRWST(__dict_Apply_10["__superclass_Prelude.Functor_0"]());
        });
    };
};
var bindRWST = function (__dict_Bind_8) {
    return function (__dict_Semigroup_9) {
        return new Prelude.Bind(function (m) {
            return function (f) {
                return function (r) {
                    return function (s) {
                        return Prelude[">>="](__dict_Bind_8)(runRWST(m)(r)(s))(function (_221) {
                            return Prelude["<$>"]((__dict_Bind_8["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(function (see$prime) {
                                var _727 = {};
                                for (var _728 in see$prime) {
                                    if (see$prime.hasOwnProperty(_728)) {
                                        _727[_728] = see$prime[_728];
                                    };
                                };
                                _727.log = Prelude["<>"](__dict_Semigroup_9)(_221.log)(see$prime.log);
                                return _727;
                            })(runRWST(f(_221.result))(r)(_221.state));
                        });
                    };
                };
            };
        }, function () {
            return applyRWST(__dict_Bind_8["__superclass_Prelude.Apply_0"]())(__dict_Semigroup_9);
        });
    };
};
var applicativeRWST = function (__dict_Applicative_12) {
    return function (__dict_Monoid_13) {
        return new Prelude.Applicative(function () {
            return applyRWST(__dict_Applicative_12["__superclass_Prelude.Apply_0"]())(__dict_Monoid_13["__superclass_Prelude.Semigroup_0"]());
        }, function (a) {
            return function (_) {
                return function (s) {
                    return Prelude.pure(__dict_Applicative_12)(mkSee(__dict_Monoid_13)(s)(a)(Data_Monoid.mempty(__dict_Monoid_13)));
                };
            };
        });
    };
};
var monadRWST = function (__dict_Monad_0) {
    return function (__dict_Monoid_1) {
        return new Prelude.Monad(function () {
            return applicativeRWST(__dict_Monad_0["__superclass_Prelude.Applicative_0"]())(__dict_Monoid_1);
        }, function () {
            return bindRWST(__dict_Monad_0["__superclass_Prelude.Bind_1"]())(__dict_Monoid_1["__superclass_Prelude.Semigroup_0"]());
        });
    };
};
module.exports = {
    RWST: RWST, 
    applicativeRWST: applicativeRWST, 
    applyRWST: applyRWST, 
    bindRWST: bindRWST, 
    evalRWST: evalRWST, 
    execRWST: execRWST, 
    functorRWST: functorRWST, 
    mapRWST: mapRWST, 
    mkSee: mkSee, 
    monadRWST: monadRWST, 
    monadTransRWST: monadTransRWST, 
    runRWST: runRWST, 
    withRWST: withRWST
};
