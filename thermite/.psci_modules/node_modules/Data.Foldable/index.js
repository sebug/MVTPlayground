"use strict";
var Data_Monoid = require("Data.Monoid");
var Prelude = require("Prelude");
var Control_Apply = require("Control.Apply");
var Data_Monoid_First = require("Data.Monoid.First");
var Data_Tuple = require("Data.Tuple");
var Data_Maybe = require("Data.Maybe");
var Data_Either = require("Data.Either");
function Foldable(foldMap, foldl, foldr) {
    this.foldMap = foldMap;
    this.foldl = foldl;
    this.foldr = foldr;
};

  function foldrArray(f) {
    return function(z) {
      return function(xs) {
        var acc = z;
        for (var i = xs.length - 1; i >= 0; --i) {
          acc = f(xs[i])(acc);
        }
        return acc;
      }
    }
  };

  function foldlArray(f) {
    return function(z) {
      return function(xs) {
        var acc = z;
        for (var i = 0, len = xs.length; i < len; ++i) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      }
    }
  };
var foldr = function (dict) {
    return dict.foldr;
};
var traverse_ = function (__dict_Applicative_0) {
    return function (__dict_Foldable_1) {
        return function (f) {
            return foldr(__dict_Foldable_1)(Prelude["<<<"](Prelude.semigroupoidArr)(Control_Apply["*>"](__dict_Applicative_0["__superclass_Prelude.Apply_0"]()))(f))(Prelude.pure(__dict_Applicative_0)(Prelude.unit));
        };
    };
};
var for_ = function (__dict_Applicative_2) {
    return function (__dict_Foldable_3) {
        return Prelude.flip(traverse_(__dict_Applicative_2)(__dict_Foldable_3));
    };
};
var sequence_ = function (__dict_Applicative_4) {
    return function (__dict_Foldable_5) {
        return traverse_(__dict_Applicative_4)(__dict_Foldable_5)(Prelude.id(Prelude.categoryArr));
    };
};
var foldl = function (dict) {
    return dict.foldl;
};
var intercalate = function (__dict_Foldable_6) {
    return function (__dict_Monoid_7) {
        return function (sep) {
            return function (xs) {
                var go = function (_276) {
                    return function (_277) {
                        if (_276.init) {
                            return {
                                init: false, 
                                acc: _277
                            };
                        };
                        return {
                            init: false, 
                            acc: Prelude["<>"](__dict_Monoid_7["__superclass_Prelude.Semigroup_0"]())(_276.acc)(Prelude["<>"](__dict_Monoid_7["__superclass_Prelude.Semigroup_0"]())(sep)(_277))
                        };
                    };
                };
                return (foldl(__dict_Foldable_6)(go)({
                    init: true, 
                    acc: Data_Monoid.mempty(__dict_Monoid_7)
                })(xs)).acc;
            };
        };
    };
};
var mconcat = function (__dict_Foldable_8) {
    return function (__dict_Monoid_9) {
        return foldl(__dict_Foldable_8)(Prelude["<>"](__dict_Monoid_9["__superclass_Prelude.Semigroup_0"]()))(Data_Monoid.mempty(__dict_Monoid_9));
    };
};
var or = function (__dict_Foldable_10) {
    return foldl(__dict_Foldable_10)(Prelude["||"](Prelude.boolLikeBoolean))(false);
};
var product = function (__dict_Foldable_11) {
    return foldl(__dict_Foldable_11)(Prelude["*"](Prelude.numNumber))(1);
};
var sum = function (__dict_Foldable_12) {
    return foldl(__dict_Foldable_12)(Prelude["+"](Prelude.numNumber))(0);
};
var foldableTuple = new Foldable(function (__dict_Monoid_13) {
    return function (_274) {
        return function (_275) {
            return _274(_275.value1);
        };
    };
}, function (_271) {
    return function (_272) {
        return function (_273) {
            return _271(_272)(_273.value1);
        };
    };
}, function (_268) {
    return function (_269) {
        return function (_270) {
            return _268(_270.value1)(_269);
        };
    };
});
var foldableMaybe = new Foldable(function (__dict_Monoid_14) {
    return function (_266) {
        return function (_267) {
            if (_267 instanceof Data_Maybe.Nothing) {
                return Data_Monoid.mempty(__dict_Monoid_14);
            };
            if (_267 instanceof Data_Maybe.Just) {
                return _266(_267.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
}, function (_263) {
    return function (_264) {
        return function (_265) {
            if (_265 instanceof Data_Maybe.Nothing) {
                return _264;
            };
            if (_265 instanceof Data_Maybe.Just) {
                return _263(_264)(_265.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
}, function (_260) {
    return function (_261) {
        return function (_262) {
            if (_262 instanceof Data_Maybe.Nothing) {
                return _261;
            };
            if (_262 instanceof Data_Maybe.Just) {
                return _260(_262.value0)(_261);
            };
            throw new Error("Failed pattern match");
        };
    };
});
var foldableEither = new Foldable(function (__dict_Monoid_15) {
    return function (_258) {
        return function (_259) {
            if (_259 instanceof Data_Either.Left) {
                return Data_Monoid.mempty(__dict_Monoid_15);
            };
            if (_259 instanceof Data_Either.Right) {
                return _258(_259.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
}, function (_255) {
    return function (_256) {
        return function (_257) {
            if (_257 instanceof Data_Either.Left) {
                return _256;
            };
            if (_257 instanceof Data_Either.Right) {
                return _255(_256)(_257.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
}, function (_252) {
    return function (_253) {
        return function (_254) {
            if (_254 instanceof Data_Either.Left) {
                return _253;
            };
            if (_254 instanceof Data_Either.Right) {
                return _252(_254.value0)(_253);
            };
            throw new Error("Failed pattern match");
        };
    };
});
var foldableArray = new Foldable(function (__dict_Monoid_16) {
    return function (f) {
        return function (xs) {
            return foldr(foldableArray)(function (x) {
                return function (acc) {
                    return Prelude["<>"](__dict_Monoid_16["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                };
            })(Data_Monoid.mempty(__dict_Monoid_16))(xs);
        };
    };
}, function (f) {
    return function (z) {
        return function (xs) {
            return foldlArray(f)(z)(xs);
        };
    };
}, function (f) {
    return function (z) {
        return function (xs) {
            return foldrArray(f)(z)(xs);
        };
    };
});
var foldMap = function (dict) {
    return dict.foldMap;
};
var lookup = function (__dict_Eq_17) {
    return function (__dict_Foldable_18) {
        return function (a) {
            return function (f) {
                return Data_Monoid_First.runFirst(foldMap(__dict_Foldable_18)(Data_Monoid_First.monoidFirst)(function (_251) {
                    return Prelude["=="](__dict_Eq_17)(a)(_251.value0) ? new Data_Maybe.Just(_251.value1) : Data_Maybe.Nothing.value;
                })(f));
            };
        };
    };
};
var fold = function (__dict_Foldable_19) {
    return function (__dict_Monoid_20) {
        return foldMap(__dict_Foldable_19)(__dict_Monoid_20)(Prelude.id(Prelude.categoryArr));
    };
};
var find = function (__dict_Foldable_21) {
    return function (p) {
        return function (f) {
            var _930 = foldMap(__dict_Foldable_21)(Data_Monoid.monoidArray)(function (x) {
                return p(x) ? [ x ] : [  ];
            })(f);
            if (_930.length >= 1) {
                var _932 = _930.slice(1);
                return new Data_Maybe.Just(_930[0]);
            };
            if (_930.length === 0) {
                return Data_Maybe.Nothing.value;
            };
            throw new Error("Failed pattern match");
        };
    };
};
var any = function (__dict_Foldable_22) {
    return function (p) {
        return Prelude["<<<"](Prelude.semigroupoidArr)(or(foldableArray))(foldMap(__dict_Foldable_22)(Data_Monoid.monoidArray)(function (x) {
            return [ p(x) ];
        }));
    };
};
var elem = function (__dict_Eq_23) {
    return function (__dict_Foldable_24) {
        return Prelude["<<<"](Prelude.semigroupoidArr)(any(__dict_Foldable_24))(Prelude["=="](__dict_Eq_23));
    };
};
var notElem = function (__dict_Eq_25) {
    return function (__dict_Foldable_26) {
        return function (x) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(Prelude.not(Prelude.boolLikeBoolean))(elem(__dict_Eq_25)(__dict_Foldable_26)(x));
        };
    };
};
var and = function (__dict_Foldable_27) {
    return foldl(__dict_Foldable_27)(Prelude["&&"](Prelude.boolLikeBoolean))(true);
};
var all = function (__dict_Foldable_28) {
    return function (p) {
        return Prelude["<<<"](Prelude.semigroupoidArr)(and(foldableArray))(foldMap(__dict_Foldable_28)(Data_Monoid.monoidArray)(function (x) {
            return [ p(x) ];
        }));
    };
};
module.exports = {
    Foldable: Foldable, 
    all: all, 
    and: and, 
    any: any, 
    elem: elem, 
    find: find, 
    fold: fold, 
    foldMap: foldMap, 
    foldableArray: foldableArray, 
    foldableEither: foldableEither, 
    foldableMaybe: foldableMaybe, 
    foldableTuple: foldableTuple, 
    foldl: foldl, 
    foldlArray: foldlArray, 
    foldr: foldr, 
    foldrArray: foldrArray, 
    for_: for_, 
    intercalate: intercalate, 
    lookup: lookup, 
    mconcat: mconcat, 
    notElem: notElem, 
    or: or, 
    product: product, 
    sequence_: sequence_, 
    sum: sum, 
    traverse_: traverse_
};
