"use strict";
var Data_Function = require("Data.Function");
var Prelude = require("Prelude");
var Data_Maybe = require("Data.Maybe");

  function runSTArray(f) {
    return f;
  };

  function emptySTArray() {
    return [];
  };

  function peekSTArrayImpl(arr, i, s, f) {
    return function() {
      var index = ~~i;
      if (0 <= index && index < arr.length) {
        return s(arr[index]);
      } else {
        return f;
      }
    };
  };

  function pokeSTArrayImpl(arr, i, a) {
    return function() {
      var index = ~~i;
      if (0 <= index && index <= arr.length) {
        arr[index] = a;
        return true;
      }
      return false;
    };
  };

  function pushAllSTArrayImpl(arr, as) {
    return function(){
      return arr.push.apply(arr, as);
    };
  };

  function spliceSTArrayImpl(arr, index, howMany, bs) {
    return function(){
      return arr.splice.apply(arr, [index, howMany].concat(bs));
    };
  };

  function copyImpl(arr) {
    return function(){
      var as = [];
      var i = -1;
      var n = arr.length;
      while(++i < n) {
        as[i] = arr[i];
      }
      return as;
    };
  };

  function toAssocArray(arr) {
    return function(){
      var as = [];
      var i = -1;
      var n = arr.length;
      while(++i < n) {
        as[i] = {value: arr[i], index: i};
      }
      return as;
    };
  };
var thaw = copyImpl;
var spliceSTArray = Data_Function.runFn4(spliceSTArrayImpl);
var pushAllSTArray = Data_Function.runFn2(pushAllSTArrayImpl);
var pushSTArray = function (arr) {
    return function (a) {
        return pushAllSTArray(arr)([ a ]);
    };
};
var pokeSTArray = function (arr) {
    return function (i) {
        return function (a) {
            return pokeSTArrayImpl(arr, i, a);
        };
    };
};
var peekSTArray = function (arr) {
    return function (i) {
        return peekSTArrayImpl(arr, i, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
    };
};
var freeze = copyImpl;
module.exports = {
    emptySTArray: emptySTArray, 
    freeze: freeze, 
    peekSTArray: peekSTArray, 
    pokeSTArray: pokeSTArray, 
    pushAllSTArray: pushAllSTArray, 
    pushSTArray: pushSTArray, 
    runSTArray: runSTArray, 
    spliceSTArray: spliceSTArray, 
    thaw: thaw, 
    toAssocArray: toAssocArray
};
