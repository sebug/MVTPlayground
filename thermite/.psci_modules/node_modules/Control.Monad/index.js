"use strict";
var Prelude = require("Prelude");
var when = function (__dict_Monad_0) {
    return function (_32) {
        return function (_33) {
            if (_32) {
                return _33;
            };
            if (!_32) {
                return Prelude["return"](__dict_Monad_0)(Prelude.unit);
            };
            throw new Error("Failed pattern match");
        };
    };
};
var unless = function (__dict_Monad_1) {
    return function (_34) {
        return function (_35) {
            if (!_34) {
                return _35;
            };
            if (_34) {
                return Prelude["return"](__dict_Monad_1)(Prelude.unit);
            };
            throw new Error("Failed pattern match");
        };
    };
};
var replicateM = function (__dict_Monad_2) {
    return function (_27) {
        return function (_28) {
            if (_27 === 0) {
                return Prelude["return"](__dict_Monad_2)([  ]);
            };
            return Prelude[">>="](__dict_Monad_2["__superclass_Prelude.Bind_1"]())(_28)(function (_1) {
                return Prelude[">>="](__dict_Monad_2["__superclass_Prelude.Bind_1"]())(replicateM(__dict_Monad_2)(_27 - 1)(_28))(function (_0) {
                    return Prelude["return"](__dict_Monad_2)(Prelude[":"](_1)(_0));
                });
            });
        };
    };
};
var foldM = function (__dict_Monad_3) {
    return function (_29) {
        return function (_30) {
            return function (_31) {
                if (_31.length === 0) {
                    return Prelude["return"](__dict_Monad_3)(_30);
                };
                if (_31.length >= 1) {
                    var _360 = _31.slice(1);
                    return Prelude[">>="](__dict_Monad_3["__superclass_Prelude.Bind_1"]())(_29(_30)(_31[0]))(function (a$prime) {
                        return foldM(__dict_Monad_3)(_29)(a$prime)(_360);
                    });
                };
                throw new Error("Failed pattern match");
            };
        };
    };
};
module.exports = {
    foldM: foldM, 
    replicateM: replicateM, 
    unless: unless, 
    when: when
};
