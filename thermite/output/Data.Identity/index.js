// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var Data_Foldable = require("Data.Foldable");
var Data_Traversable = require("Data.Traversable");
var Control_Extend = require("Control.Extend");
var Control_Comonad = require("Control.Comonad");
var Identity = {
    create: function (value) {
        return value;
    }
};
var showConst = function (__dict_Show_2) {
    return new Prelude.Show(function (_237) {
        return "Identity (" + (Prelude.show(__dict_Show_2)(_237) + ")");
    });
};
var runIdentity = function (_232) {
    return _232;
};
var functorIdentity = new Prelude.Functor(function (_238) {
    return function (_239) {
        return _238(_239);
    };
});
var foldableIdentity = new Data_Foldable.Foldable(function (__dict_Monoid_4) {
    return function (_249) {
        return function (_250) {
            return _249(_250);
        };
    };
}, function (_246) {
    return function (_247) {
        return function (_248) {
            return _246(_247)(_248);
        };
    };
}, function (_243) {
    return function (_244) {
        return function (_245) {
            return _243(_245)(_244);
        };
    };
});
var traversableIdentity = new Data_Traversable.Traversable(function () {
    return foldableIdentity;
}, function () {
    return functorIdentity;
}, function (__dict_Applicative_1) {
    return function (_253) {
        return Prelude["<$>"]((__dict_Applicative_1["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Identity.create)(_253);
    };
}, function (__dict_Applicative_0) {
    return function (_251) {
        return function (_252) {
            return Prelude["<$>"]((__dict_Applicative_0["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Identity.create)(_251(_252));
        };
    };
});
var extendIdentity = new Control_Extend.Extend(function (f) {
    return function (m) {
        return f(m);
    };
}, function () {
    return functorIdentity;
});
var eqIdentity = function (__dict_Eq_5) {
    return new Prelude.Eq(function (x) {
        return function (y) {
            return !Prelude["=="](eqIdentity(__dict_Eq_5))(x)(y);
        };
    }, function (_233) {
        return function (_234) {
            return Prelude["=="](__dict_Eq_5)(_233)(_234);
        };
    });
};
var ordIdentity = function (__dict_Ord_3) {
    return new Prelude.Ord(function () {
        return eqIdentity(__dict_Ord_3["__superclass_Prelude.Eq_0"]());
    }, function (_235) {
        return function (_236) {
            return Prelude.compare(__dict_Ord_3)(_235)(_236);
        };
    });
};
var comonadIdentity = new Control_Comonad.Comonad(function () {
    return extendIdentity;
}, function (_242) {
    return _242;
});
var applyIdentity = new Prelude.Apply(function (_240) {
    return function (_241) {
        return _240(_241);
    };
}, function () {
    return functorIdentity;
});
var bindIdentity = new Prelude.Bind(function (m) {
    return function (f) {
        return f(runIdentity(m));
    };
}, function () {
    return applyIdentity;
});
var applicativeIdentity = new Prelude.Applicative(function () {
    return applyIdentity;
}, Identity.create);
var monadIdentity = new Prelude.Monad(function () {
    return applicativeIdentity;
}, function () {
    return bindIdentity;
});
module.exports = {
    Identity: Identity, 
    applicativeIdentity: applicativeIdentity, 
    applyIdentity: applyIdentity, 
    bindIdentity: bindIdentity, 
    comonadIdentity: comonadIdentity, 
    eqIdentity: eqIdentity, 
    extendIdentity: extendIdentity, 
    foldableIdentity: foldableIdentity, 
    functorIdentity: functorIdentity, 
    monadIdentity: monadIdentity, 
    ordIdentity: ordIdentity, 
    runIdentity: runIdentity, 
    showConst: showConst, 
    traversableIdentity: traversableIdentity
};
