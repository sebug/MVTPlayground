// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var Control_Extend = require("Control.Extend");
var Control_Alt = require("Control.Alt");
var Control_Plus = require("Control.Plus");
var Control_Alternative = require("Control.Alternative");
var Control_MonadPlus = require("Control.MonadPlus");
function Nothing() {

};
Nothing.value = new Nothing();
function Just(value0) {
    this.value0 = value0;
};
Just.create = function (value0) {
    return new Just(value0);
};
var showMaybe = function (__dict_Show_0) {
    return new Prelude.Show(function (_30) {
        if (_30 instanceof Just) {
            return "Just (" + (Prelude.show(__dict_Show_0)(_30.value0) + ")");
        };
        if (_30 instanceof Nothing) {
            return "Nothing";
        };
        throw new Error("Failed pattern match");
    });
};
var semigroupMaybe = function (__dict_Semigroup_1) {
    return new Prelude.Semigroup(function (_28) {
        return function (_29) {
            if (_28 instanceof Nothing) {
                return _29;
            };
            if (_29 instanceof Nothing) {
                return _28;
            };
            if (_28 instanceof Just && _29 instanceof Just) {
                return new Just(Prelude["<>"](__dict_Semigroup_1)(_28.value0)(_29.value0));
            };
            throw new Error("Failed pattern match");
        };
    });
};
var maybe = function (_15) {
    return function (_16) {
        return function (_17) {
            if (_17 instanceof Nothing) {
                return _15;
            };
            if (_17 instanceof Just) {
                return _16(_17.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
};
var isNothing = maybe(true)(Prelude["const"](false));
var isJust = maybe(false)(Prelude["const"](true));
var functorMaybe = new Prelude.Functor(function (_18) {
    return function (_19) {
        if (_19 instanceof Just) {
            return new Just(_18(_19.value0));
        };
        return Nothing.value;
    };
});
var fromMaybe = function (a) {
    return maybe(a)(Prelude.id(Prelude.categoryArr));
};
var extendMaybe = new Control_Extend.Extend(function (_26) {
    return function (_27) {
        if (_27 instanceof Nothing) {
            return Nothing.value;
        };
        return Just.create(_26(_27));
    };
}, function () {
    return functorMaybe;
});
var eqMaybe = function (__dict_Eq_3) {
    return new Prelude.Eq(function (a) {
        return function (b) {
            return !Prelude["=="](eqMaybe(__dict_Eq_3))(a)(b);
        };
    }, function (_31) {
        return function (_32) {
            if (_31 instanceof Nothing && _32 instanceof Nothing) {
                return true;
            };
            if (_31 instanceof Just && _32 instanceof Just) {
                return Prelude["=="](__dict_Eq_3)(_31.value0)(_32.value0);
            };
            return false;
        };
    });
};
var ordMaybe = function (__dict_Ord_2) {
    return new Prelude.Ord(function () {
        return eqMaybe(__dict_Ord_2["__superclass_Prelude.Eq_0"]());
    }, function (_33) {
        return function (_34) {
            if (_33 instanceof Just && _34 instanceof Just) {
                return Prelude.compare(__dict_Ord_2)(_33.value0)(_34.value0);
            };
            if (_33 instanceof Nothing && _34 instanceof Nothing) {
                return Prelude.EQ.value;
            };
            if (_33 instanceof Nothing) {
                return Prelude.LT.value;
            };
            if (_34 instanceof Nothing) {
                return Prelude.GT.value;
            };
            throw new Error("Failed pattern match");
        };
    });
};
var applyMaybe = new Prelude.Apply(function (_20) {
    return function (_21) {
        if (_20 instanceof Just) {
            return Prelude["<$>"](functorMaybe)(_20.value0)(_21);
        };
        if (_20 instanceof Nothing) {
            return Nothing.value;
        };
        throw new Error("Failed pattern match");
    };
}, function () {
    return functorMaybe;
});
var bindMaybe = new Prelude.Bind(function (_24) {
    return function (_25) {
        if (_24 instanceof Just) {
            return _25(_24.value0);
        };
        if (_24 instanceof Nothing) {
            return Nothing.value;
        };
        throw new Error("Failed pattern match");
    };
}, function () {
    return applyMaybe;
});
var applicativeMaybe = new Prelude.Applicative(function () {
    return applyMaybe;
}, Just.create);
var monadMaybe = new Prelude.Monad(function () {
    return applicativeMaybe;
}, function () {
    return bindMaybe;
});
var altMaybe = new Control_Alt.Alt(function (_22) {
    return function (_23) {
        if (_22 instanceof Nothing) {
            return _23;
        };
        return _22;
    };
}, function () {
    return functorMaybe;
});
var plusMaybe = new Control_Plus.Plus(function () {
    return altMaybe;
}, Nothing.value);
var alternativeMaybe = new Control_Alternative.Alternative(function () {
    return plusMaybe;
}, function () {
    return applicativeMaybe;
});
var monadPlusMaybe = new Control_MonadPlus.MonadPlus(function () {
    return alternativeMaybe;
}, function () {
    return monadMaybe;
});
module.exports = {
    Just: Just, 
    Nothing: Nothing, 
    altMaybe: altMaybe, 
    alternativeMaybe: alternativeMaybe, 
    applicativeMaybe: applicativeMaybe, 
    applyMaybe: applyMaybe, 
    bindMaybe: bindMaybe, 
    eqMaybe: eqMaybe, 
    extendMaybe: extendMaybe, 
    fromMaybe: fromMaybe, 
    functorMaybe: functorMaybe, 
    isJust: isJust, 
    isNothing: isNothing, 
    maybe: maybe, 
    monadMaybe: monadMaybe, 
    monadPlusMaybe: monadPlusMaybe, 
    ordMaybe: ordMaybe, 
    plusMaybe: plusMaybe, 
    semigroupMaybe: semigroupMaybe, 
    showMaybe: showMaybe
};
