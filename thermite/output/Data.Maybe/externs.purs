-- Generated by psc-make version 0.6.2
module Data.Maybe where
import Data.Maybe ()
import Prelude ()
import Prim ()
import Prelude ()
import Control.Alt ()
import Control.Alternative ()
import Control.Extend ()
import Control.MonadPlus ()
import Control.Plus ()
data Maybe (a :: *) = Nothing  | Just a
foreign import isNothing :: forall a. Data.Maybe.Maybe a -> Prim.Boolean
foreign import isJust :: forall a. Data.Maybe.Maybe a -> Prim.Boolean
foreign import fromMaybe :: forall a. a -> Data.Maybe.Maybe a -> a
foreign import maybe :: forall a b. b -> (a -> b) -> Data.Maybe.Maybe a -> b
foreign import instance functorMaybe :: Prelude.Functor Data.Maybe.Maybe
foreign import instance applyMaybe :: Prelude.Apply Data.Maybe.Maybe
foreign import instance applicativeMaybe :: Prelude.Applicative Data.Maybe.Maybe
foreign import instance altMaybe :: Control.Alt.Alt Data.Maybe.Maybe
foreign import instance plusMaybe :: Control.Plus.Plus Data.Maybe.Maybe
foreign import instance alternativeMaybe :: Control.Alternative.Alternative Data.Maybe.Maybe
foreign import instance bindMaybe :: Prelude.Bind Data.Maybe.Maybe
foreign import instance monadMaybe :: Prelude.Monad Data.Maybe.Maybe
foreign import instance monadPlusMaybe :: Control.MonadPlus.MonadPlus Data.Maybe.Maybe
foreign import instance extendMaybe :: Control.Extend.Extend Data.Maybe.Maybe
foreign import instance semigroupMaybe :: (Prelude.Semigroup a) => Prelude.Semigroup (Data.Maybe.Maybe a)
foreign import instance showMaybe :: (Prelude.Show a) => Prelude.Show (Data.Maybe.Maybe a)
foreign import instance eqMaybe :: (Prelude.Eq a) => Prelude.Eq (Data.Maybe.Maybe a)
foreign import instance ordMaybe :: (Prelude.Ord a) => Prelude.Ord (Data.Maybe.Maybe a)
