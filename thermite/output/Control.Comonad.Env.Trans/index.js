// Generated by psc-make version 0.6.2
"use strict";
var Control_Comonad = require("Control.Comonad");
var Prelude = require("Prelude");
var Data_Tuple = require("Data.Tuple");
var Control_Extend = require("Control.Extend");
var Control_Comonad_Trans = require("Control.Comonad.Trans");
var EnvT = {
    create: function (value) {
        return value;
    }
};
var withEnvT = function (_119) {
    return function (_120) {
        return EnvT.create(new Data_Tuple.Tuple(_119(_120.value0), _120.value1));
    };
};
var runEnvT = function (_118) {
    return _118;
};
var mapEnvT = function (_121) {
    return function (_122) {
        return EnvT.create(new Data_Tuple.Tuple(_122.value0, _121(_122.value1)));
    };
};
var functorEnvT = function (__dict_Functor_0) {
    return new Prelude.Functor(function (_123) {
        return function (_124) {
            return EnvT.create(new Data_Tuple.Tuple(_124.value0, Prelude["<$>"](__dict_Functor_0)(_123)(_124.value1)));
        };
    });
};
var extendEnvT = function (__dict_Extend_1) {
    return new Control_Extend.Extend(function (_125) {
        return function (_126) {
            return EnvT.create(new Data_Tuple.Tuple(_126.value0, Prelude["<$>"](__dict_Extend_1["__superclass_Prelude.Functor_0"]())(_125)(Control_Extend["<<="](__dict_Extend_1)(Prelude[">>>"](Prelude.semigroupoidArr)(Data_Tuple.Tuple.create(_126.value0))(EnvT.create))(_126.value1))));
        };
    }, function () {
        return functorEnvT(__dict_Extend_1["__superclass_Prelude.Functor_0"]());
    });
};
var comonadTransEnvT = new Control_Comonad_Trans.ComonadTrans(function (__dict_Comonad_2) {
    return function (_128) {
        return _128.value1;
    };
});
var comonadEnvT = function (__dict_Comonad_3) {
    return new Control_Comonad.Comonad(function () {
        return extendEnvT(__dict_Comonad_3["__superclass_Control.Extend.Extend_0"]());
    }, function (_127) {
        return Control_Comonad.extract(__dict_Comonad_3)(_127.value1);
    });
};
module.exports = {
    EnvT: EnvT, 
    comonadEnvT: comonadEnvT, 
    comonadTransEnvT: comonadTransEnvT, 
    extendEnvT: extendEnvT, 
    functorEnvT: functorEnvT, 
    mapEnvT: mapEnvT, 
    runEnvT: runEnvT, 
    withEnvT: withEnvT
};
