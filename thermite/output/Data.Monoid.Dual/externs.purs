-- Generated by psc-make version 0.6.2
module Data.Monoid.Dual where
import Prelude ()
import Data.Monoid ()
import Prim ()
import Prelude ()
import Data.Monoid ()
newtype Dual (a :: *) = Dual a
foreign import runDual :: forall a. Data.Monoid.Dual.Dual a -> a
foreign import instance eqDual :: (Prelude.Eq a) => Prelude.Eq (Data.Monoid.Dual.Dual a)
foreign import instance ordDual :: (Prelude.Ord a) => Prelude.Ord (Data.Monoid.Dual.Dual a)
foreign import instance showDual :: (Prelude.Show a) => Prelude.Show (Data.Monoid.Dual.Dual a)
foreign import instance semigroupDual :: (Prelude.Semigroup a) => Prelude.Semigroup (Data.Monoid.Dual.Dual a)
foreign import instance monoidDual :: (Data.Monoid.Monoid a) => Data.Monoid.Monoid (Data.Monoid.Dual.Dual a)
