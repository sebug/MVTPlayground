-- Generated by psc-make version 0.6.2
module Data.Either.Nested where
import Data.Either ()
import Data.Either.Nested ()
import Prim ()
import Prelude ()
import Data.Either ()
foreign import choice10 :: forall a b c d e f g h i j z. (a -> z) -> (b -> z) -> (c -> z) -> (d -> z) -> (e -> z) -> (f -> z) -> (g -> z) -> (h -> z) -> (i -> z) -> (j -> z) -> Data.Either.Either a (Data.Either.Either b (Data.Either.Either c (Data.Either.Either d (Data.Either.Either e (Data.Either.Either f (Data.Either.Either g (Data.Either.Either h (Data.Either.Either i j)))))))) -> z
foreign import choice9 :: forall a b c d e f g h i z. (a -> z) -> (b -> z) -> (c -> z) -> (d -> z) -> (e -> z) -> (f -> z) -> (g -> z) -> (h -> z) -> (i -> z) -> Data.Either.Either a (Data.Either.Either b (Data.Either.Either c (Data.Either.Either d (Data.Either.Either e (Data.Either.Either f (Data.Either.Either g (Data.Either.Either h i))))))) -> z
foreign import choice8 :: forall a b c d e f g h z. (a -> z) -> (b -> z) -> (c -> z) -> (d -> z) -> (e -> z) -> (f -> z) -> (g -> z) -> (h -> z) -> Data.Either.Either a (Data.Either.Either b (Data.Either.Either c (Data.Either.Either d (Data.Either.Either e (Data.Either.Either f (Data.Either.Either g h)))))) -> z
foreign import choice7 :: forall a b c d e f g z. (a -> z) -> (b -> z) -> (c -> z) -> (d -> z) -> (e -> z) -> (f -> z) -> (g -> z) -> Data.Either.Either a (Data.Either.Either b (Data.Either.Either c (Data.Either.Either d (Data.Either.Either e (Data.Either.Either f g))))) -> z
foreign import choice6 :: forall a b c d e f z. (a -> z) -> (b -> z) -> (c -> z) -> (d -> z) -> (e -> z) -> (f -> z) -> Data.Either.Either a (Data.Either.Either b (Data.Either.Either c (Data.Either.Either d (Data.Either.Either e f)))) -> z
foreign import choice5 :: forall a b c d e z. (a -> z) -> (b -> z) -> (c -> z) -> (d -> z) -> (e -> z) -> Data.Either.Either a (Data.Either.Either b (Data.Either.Either c (Data.Either.Either d e))) -> z
foreign import choice4 :: forall a b c d z. (a -> z) -> (b -> z) -> (c -> z) -> (d -> z) -> Data.Either.Either a (Data.Either.Either b (Data.Either.Either c d)) -> z
foreign import choice3 :: forall a b c z. (a -> z) -> (b -> z) -> (c -> z) -> Data.Either.Either a (Data.Either.Either b c) -> z
foreign import choice2 :: forall a b z. (a -> z) -> (b -> z) -> Data.Either.Either a b -> z
