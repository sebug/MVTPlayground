(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
function getCall() {  var msg = 'Hello';  return msg;};
module.exports = {
    getCall: getCall
};

},{"Prelude":12}],2:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
function Alt($less$bar$greater, __superclass_Prelude$dotFunctor_0) {
    this["<|>"] = $less$bar$greater;
    this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
};
var $less$bar$greater = function (dict) {
    return dict["<|>"];
};
module.exports = {
    "<|>": $less$bar$greater, 
    Alt: Alt
};

},{"Prelude":12}],3:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var Control_Lazy = require("Control.Lazy");
var Control_Alt = require("Control.Alt");
function Alternative(__superclass_Control$dotPlus$dotPlus_1, __superclass_Prelude$dotApplicative_0) {
    this["__superclass_Control.Plus.Plus_1"] = __superclass_Control$dotPlus$dotPlus_1;
    this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
};
var some = function (__dict_Alternative_0) {
    return function (__dict_Lazy1_1) {
        return function (v) {
            return Prelude["<*>"]((__dict_Alternative_0["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())(Prelude["<$>"](((__dict_Alternative_0["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(v))(Control_Lazy.defer1(__dict_Lazy1_1)(function (_) {
                return many(__dict_Alternative_0)(__dict_Lazy1_1)(v);
            }));
        };
    };
};
var many = function (__dict_Alternative_2) {
    return function (__dict_Lazy1_3) {
        return function (v) {
            return Control_Alt["<|>"]((__dict_Alternative_2["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(some(__dict_Alternative_2)(__dict_Lazy1_3)(v))(Prelude.pure(__dict_Alternative_2["__superclass_Prelude.Applicative_0"]())([  ]));
        };
    };
};
module.exports = {
    Alternative: Alternative, 
    many: many, 
    some: some
};

},{"Control.Alt":2,"Control.Lazy":5,"Prelude":12}],4:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
function Extend($less$less$eq, __superclass_Prelude$dotFunctor_0) {
    this["<<="] = $less$less$eq;
    this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
};
var $less$less$eq = function (dict) {
    return dict["<<="];
};
var $eq$less$eq = function (__dict_Extend_0) {
    return function (f) {
        return function (g) {
            return function (w) {
                return f($less$less$eq(__dict_Extend_0)(g)(w));
            };
        };
    };
};
var $eq$greater$eq = function (__dict_Extend_1) {
    return function (f) {
        return function (g) {
            return function (w) {
                return g($less$less$eq(__dict_Extend_1)(f)(w));
            };
        };
    };
};
var $eq$greater$greater = function (__dict_Extend_2) {
    return function (w) {
        return function (f) {
            return $less$less$eq(__dict_Extend_2)(f)(w);
        };
    };
};
var extendArr = function (__dict_Semigroup_3) {
    return new Extend(function (f) {
        return function (g) {
            return function (w) {
                return f(function (w$prime) {
                    return g(Prelude["<>"](__dict_Semigroup_3)(w)(w$prime));
                });
            };
        };
    }, function () {
        return Prelude.functorArr;
    });
};
var duplicate = function (__dict_Extend_4) {
    return function (w) {
        return $less$less$eq(__dict_Extend_4)(Prelude.id(Prelude.categoryArr))(w);
    };
};
module.exports = {
    "<<=": $less$less$eq, 
    "=<=": $eq$less$eq, 
    "=>=": $eq$greater$eq, 
    "=>>": $eq$greater$greater, 
    Extend: Extend, 
    duplicate: duplicate, 
    extendArr: extendArr
};

},{"Prelude":12}],5:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
function Lazy(defer) {
    this.defer = defer;
};
function Lazy1(defer1) {
    this.defer1 = defer1;
};
function Lazy2(defer2) {
    this.defer2 = defer2;
};
var defer2 = function (dict) {
    return dict.defer2;
};
var fix2 = function (__dict_Lazy2_0) {
    return function (f) {
        return defer2(__dict_Lazy2_0)(function (_) {
            return f(fix2(__dict_Lazy2_0)(f));
        });
    };
};
var defer1 = function (dict) {
    return dict.defer1;
};
var fix1 = function (__dict_Lazy1_1) {
    return function (f) {
        return defer1(__dict_Lazy1_1)(function (_) {
            return f(fix1(__dict_Lazy1_1)(f));
        });
    };
};
var defer = function (dict) {
    return dict.defer;
};
var fix = function (__dict_Lazy_2) {
    return function (f) {
        return defer(__dict_Lazy_2)(function (_) {
            return f(fix(__dict_Lazy_2)(f));
        });
    };
};
module.exports = {
    Lazy: Lazy, 
    Lazy1: Lazy1, 
    Lazy2: Lazy2, 
    defer: defer, 
    defer1: defer1, 
    defer2: defer2, 
    fix: fix, 
    fix1: fix1, 
    fix2: fix2
};

},{"Prelude":12}],6:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
function returnE(a) {  return function() {    return a;  };};
function bindE(a) {  return function(f) {    return function() {      return f(a())();    };  };};
function runPure(f) {  return f();};
function untilE(f) {  return function() {    while (!f());    return {};  };};
function whileE(f) {  return function(a) {    return function() {      while (f()) {        a();      }      return {};    };  };};
function forE(lo) {  return function(hi) {    return function(f) {      return function() {        for (var i = lo; i < hi; i++) {          f(i)();        }      };    };  };};
function foreachE(as) {  return function(f) {    return function() {      for (var i = 0; i < as.length; i++) {        f(as[i])();      }    };  };};
var monadEff = new Prelude.Monad(function () {
    return applicativeEff;
}, function () {
    return bindEff;
});
var bindEff = new Prelude.Bind(bindE, function () {
    return applyEff;
});
var applyEff = new Prelude.Apply(Prelude.ap(monadEff), function () {
    return functorEff;
});
var applicativeEff = new Prelude.Applicative(function () {
    return applyEff;
}, returnE);
var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
module.exports = {
    applicativeEff: applicativeEff, 
    applyEff: applyEff, 
    bindE: bindE, 
    bindEff: bindEff, 
    forE: forE, 
    foreachE: foreachE, 
    functorEff: functorEff, 
    monadEff: monadEff, 
    returnE: returnE, 
    runPure: runPure, 
    untilE: untilE, 
    whileE: whileE
};

},{"Prelude":12}],7:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var Control_Plus = require("Control.Plus");
function MonadPlus(__superclass_Control$dotAlternative$dotAlternative_1, __superclass_Prelude$dotMonad_0) {
    this["__superclass_Control.Alternative.Alternative_1"] = __superclass_Control$dotAlternative$dotAlternative_1;
    this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
};
var guard = function (__dict_MonadPlus_0) {
    return function (_14) {
        if (_14) {
            return Prelude["return"](__dict_MonadPlus_0["__superclass_Prelude.Monad_0"]())(Prelude.unit);
        };
        if (!_14) {
            return Control_Plus.empty((__dict_MonadPlus_0["__superclass_Control.Alternative.Alternative_1"]())["__superclass_Control.Plus.Plus_1"]());
        };
        throw new Error("Failed pattern match");
    };
};
module.exports = {
    MonadPlus: MonadPlus, 
    guard: guard
};

},{"Control.Plus":8,"Prelude":12}],8:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
function Plus(__superclass_Control$dotAlt$dotAlt_0, empty) {
    this["__superclass_Control.Alt.Alt_0"] = __superclass_Control$dotAlt$dotAlt_0;
    this.empty = empty;
};
var empty = function (dict) {
    return dict.empty;
};
module.exports = {
    Plus: Plus, 
    empty: empty
};

},{"Prelude":12}],9:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var Control_Extend = require("Control.Extend");
var Control_Alt = require("Control.Alt");
var Control_Plus = require("Control.Plus");
var Control_Alternative = require("Control.Alternative");
var Control_MonadPlus = require("Control.MonadPlus");
function Nothing() {

};
Nothing.value = new Nothing();
function Just(value0) {
    this.value0 = value0;
};
Just.create = function (value0) {
    return new Just(value0);
};
var showMaybe = function (__dict_Show_0) {
    return new Prelude.Show(function (_30) {
        if (_30 instanceof Just) {
            return "Just (" + (Prelude.show(__dict_Show_0)(_30.value0) + ")");
        };
        if (_30 instanceof Nothing) {
            return "Nothing";
        };
        throw new Error("Failed pattern match");
    });
};
var semigroupMaybe = function (__dict_Semigroup_1) {
    return new Prelude.Semigroup(function (_28) {
        return function (_29) {
            if (_28 instanceof Nothing) {
                return _29;
            };
            if (_29 instanceof Nothing) {
                return _28;
            };
            if (_28 instanceof Just && _29 instanceof Just) {
                return new Just(Prelude["<>"](__dict_Semigroup_1)(_28.value0)(_29.value0));
            };
            throw new Error("Failed pattern match");
        };
    });
};
var maybe = function (_15) {
    return function (_16) {
        return function (_17) {
            if (_17 instanceof Nothing) {
                return _15;
            };
            if (_17 instanceof Just) {
                return _16(_17.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
};
var isNothing = maybe(true)(Prelude["const"](false));
var isJust = maybe(false)(Prelude["const"](true));
var functorMaybe = new Prelude.Functor(function (_18) {
    return function (_19) {
        if (_19 instanceof Just) {
            return new Just(_18(_19.value0));
        };
        return Nothing.value;
    };
});
var fromMaybe = function (a) {
    return maybe(a)(Prelude.id(Prelude.categoryArr));
};
var extendMaybe = new Control_Extend.Extend(function (_26) {
    return function (_27) {
        if (_27 instanceof Nothing) {
            return Nothing.value;
        };
        return Just.create(_26(_27));
    };
}, function () {
    return functorMaybe;
});
var eqMaybe = function (__dict_Eq_3) {
    return new Prelude.Eq(function (a) {
        return function (b) {
            return !Prelude["=="](eqMaybe(__dict_Eq_3))(a)(b);
        };
    }, function (_31) {
        return function (_32) {
            if (_31 instanceof Nothing && _32 instanceof Nothing) {
                return true;
            };
            if (_31 instanceof Just && _32 instanceof Just) {
                return Prelude["=="](__dict_Eq_3)(_31.value0)(_32.value0);
            };
            return false;
        };
    });
};
var ordMaybe = function (__dict_Ord_2) {
    return new Prelude.Ord(function () {
        return eqMaybe(__dict_Ord_2["__superclass_Prelude.Eq_0"]());
    }, function (_33) {
        return function (_34) {
            if (_33 instanceof Just && _34 instanceof Just) {
                return Prelude.compare(__dict_Ord_2)(_33.value0)(_34.value0);
            };
            if (_33 instanceof Nothing && _34 instanceof Nothing) {
                return Prelude.EQ.value;
            };
            if (_33 instanceof Nothing) {
                return Prelude.LT.value;
            };
            if (_34 instanceof Nothing) {
                return Prelude.GT.value;
            };
            throw new Error("Failed pattern match");
        };
    });
};
var applyMaybe = new Prelude.Apply(function (_20) {
    return function (_21) {
        if (_20 instanceof Just) {
            return Prelude["<$>"](functorMaybe)(_20.value0)(_21);
        };
        if (_20 instanceof Nothing) {
            return Nothing.value;
        };
        throw new Error("Failed pattern match");
    };
}, function () {
    return functorMaybe;
});
var bindMaybe = new Prelude.Bind(function (_24) {
    return function (_25) {
        if (_24 instanceof Just) {
            return _25(_24.value0);
        };
        if (_24 instanceof Nothing) {
            return Nothing.value;
        };
        throw new Error("Failed pattern match");
    };
}, function () {
    return applyMaybe;
});
var applicativeMaybe = new Prelude.Applicative(function () {
    return applyMaybe;
}, Just.create);
var monadMaybe = new Prelude.Monad(function () {
    return applicativeMaybe;
}, function () {
    return bindMaybe;
});
var altMaybe = new Control_Alt.Alt(function (_22) {
    return function (_23) {
        if (_22 instanceof Nothing) {
            return _23;
        };
        return _22;
    };
}, function () {
    return functorMaybe;
});
var plusMaybe = new Control_Plus.Plus(function () {
    return altMaybe;
}, Nothing.value);
var alternativeMaybe = new Control_Alternative.Alternative(function () {
    return plusMaybe;
}, function () {
    return applicativeMaybe;
});
var monadPlusMaybe = new Control_MonadPlus.MonadPlus(function () {
    return alternativeMaybe;
}, function () {
    return monadMaybe;
});
module.exports = {
    Just: Just, 
    Nothing: Nothing, 
    altMaybe: altMaybe, 
    alternativeMaybe: alternativeMaybe, 
    applicativeMaybe: applicativeMaybe, 
    applyMaybe: applyMaybe, 
    bindMaybe: bindMaybe, 
    eqMaybe: eqMaybe, 
    extendMaybe: extendMaybe, 
    fromMaybe: fromMaybe, 
    functorMaybe: functorMaybe, 
    isJust: isJust, 
    isNothing: isNothing, 
    maybe: maybe, 
    monadMaybe: monadMaybe, 
    monadPlusMaybe: monadPlusMaybe, 
    ordMaybe: ordMaybe, 
    plusMaybe: plusMaybe, 
    semigroupMaybe: semigroupMaybe, 
    showMaybe: showMaybe
};

},{"Control.Alt":2,"Control.Alternative":3,"Control.Extend":4,"Control.MonadPlus":7,"Control.Plus":8,"Prelude":12}],10:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
function trace(s) {  return function() {    console.log(s);    return {};  };};
var print = function (__dict_Show_0) {
    return function (o) {
        return trace(Prelude.show(__dict_Show_0)(o));
    };
};
module.exports = {
    print: print, 
    trace: trace
};

},{"Prelude":12}],11:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Thermite = require("Thermite");
var Thermite_Html_Elements = require("Thermite.Html.Elements");
var Thermite_Html = require("Thermite.Html");
var Thermite_Html_Attributes = require("Thermite.Html.Attributes");
var Thermite_Events = require("Thermite.Events");
var Prelude = require("Prelude");
var Thermite_Action = require("Thermite.Action");
var Debug_Trace = require("Debug.Trace");
var API_User = require("API.User");
var Control_Monad_Eff = require("Control.Monad.Eff");
function SetFirstName(value0) {
    this.value0 = value0;
};
SetFirstName.create = function (value0) {
    return new SetFirstName(value0);
};
function SaveUser() {

};
SaveUser.value = new SaveUser();
function LoadUser() {

};
LoadUser.value = new LoadUser();
function getValue(e) {  return e.target.value;};
var performAction = function (_3) {
    return function (_4) {
        if (_4 instanceof LoadUser) {
            return Thermite_Action.modifyState(function (st) {
                return {
                    firstName: st.firstName
                };
            });
        };
        if (_4 instanceof SaveUser) {
            return Thermite_Action.modifyState(function (st) {
                return {
                    firstName: st.firstName
                };
            });
        };
        if (_4 instanceof SetFirstName) {
            return Thermite_Action.modifyState(function (st) {
                return {
                    firstName: _4.value0
                };
            });
        };
        throw new Error("Failed pattern match");
    };
};
var initialState = {
    firstName: "Blubb"
};
var handleChangeEvent = function (e) {
    return new SetFirstName(getValue(e));
};
var render = function (_0) {
    return function (_1) {
        return function (_2) {
            return Thermite_Html_Elements["div'"]([ Thermite_Html_Elements["div'"]([ Thermite_Html.text("First name"), Thermite_Html_Elements.input([ Thermite_Html_Attributes.value(_1.firstName), Thermite_Events.onChange(_0)(handleChangeEvent) ])([  ]) ]), Thermite_Html_Elements.button([ Thermite_Events.onClick(_0)(Prelude["const"](SaveUser.value)) ])([ Thermite_Html.text("Save User") ]) ]);
        };
    };
};
var spec = Thermite.componentWillMount(LoadUser.value)(Thermite.simpleSpec(initialState)(performAction)(render));
var main = (function () {
    var cl = Thermite.createClass(spec);
    return function __do() {
        Thermite.render(cl)(Prelude.unit)();
        return Debug_Trace.trace(API_User.getCall(Prelude.unit))();
    };
})();
module.exports = {
    LoadUser: LoadUser, 
    SaveUser: SaveUser, 
    SetFirstName: SetFirstName, 
    getValue: getValue, 
    handleChangeEvent: handleChangeEvent, 
    initialState: initialState, 
    main: main, 
    performAction: performAction, 
    render: render, 
    spec: spec
};

},{"API.User":1,"Control.Monad.Eff":6,"Debug.Trace":10,"Prelude":12,"Thermite":20,"Thermite.Action":13,"Thermite.Events":14,"Thermite.Html":17,"Thermite.Html.Attributes":15,"Thermite.Html.Elements":16}],12:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Unit = {
    create: function (value) {
        return value;
    }
};
function LT() {

};
LT.value = new LT();
function GT() {

};
GT.value = new GT();
function EQ() {

};
EQ.value = new EQ();
function Semigroupoid($less$less$less) {
    this["<<<"] = $less$less$less;
};
function Category(__superclass_Prelude$dotSemigroupoid_0, id) {
    this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
    this.id = id;
};
function Show(show) {
    this.show = show;
};
function Functor($less$dollar$greater) {
    this["<$>"] = $less$dollar$greater;
};
function Apply($less$times$greater, __superclass_Prelude$dotFunctor_0) {
    this["<*>"] = $less$times$greater;
    this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
};
function Applicative(__superclass_Prelude$dotApply_0, pure) {
    this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    this.pure = pure;
};
function Bind($greater$greater$eq, __superclass_Prelude$dotApply_0) {
    this[">>="] = $greater$greater$eq;
    this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
};
function Monad(__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
    this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
    this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
};
function Num($percent, $times, $plus, $minus, $div, negate) {
    this["%"] = $percent;
    this["*"] = $times;
    this["+"] = $plus;
    this["-"] = $minus;
    this["/"] = $div;
    this.negate = negate;
};
function Eq($div$eq, $eq$eq) {
    this["/="] = $div$eq;
    this["=="] = $eq$eq;
};
function Ord(__superclass_Prelude$dotEq_0, compare) {
    this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
    this.compare = compare;
};
function Bits($dot$amp$dot, $dot$up$dot, $dot$bar$dot, complement, shl, shr, zshr) {
    this[".&."] = $dot$amp$dot;
    this[".^."] = $dot$up$dot;
    this[".|."] = $dot$bar$dot;
    this.complement = complement;
    this.shl = shl;
    this.shr = shr;
    this.zshr = zshr;
};
function BoolLike($amp$amp, not, $bar$bar) {
    this["&&"] = $amp$amp;
    this.not = not;
    this["||"] = $bar$bar;
};
function Semigroup($less$greater) {
    this["<>"] = $less$greater;
};
function cons(e) {  return function(l) {    return [e].concat(l);  };};
function showStringImpl(s) {  return JSON.stringify(s);};
function showNumberImpl(n) {  return n.toString();};
function showArrayImpl(f) {  return function(xs) {    var ss = [];    for (var i = 0, l = xs.length; i < l; i++) {      ss[i] = f(xs[i]);    }    return '[' + ss.join(',') + ']';  };};
function numAdd(n1) {  return function(n2) {    return n1 + n2;  };};
function numSub(n1) {  return function(n2) {    return n1 - n2;  };};
function numMul(n1) {  return function(n2) {    return n1 * n2;  };};
function numDiv(n1) {  return function(n2) {    return n1 / n2;  };};
function numMod(n1) {  return function(n2) {    return n1 % n2;  };};
function numNegate(n) {  return -n;};
function refEq(r1) {  return function(r2) {    return r1 === r2;  };};
function refIneq(r1) {  return function(r2) {    return r1 !== r2;  };};
function eqArrayImpl(f) {  return function(xs) {    return function(ys) {      if (xs.length !== ys.length) return false;      for (var i = 0; i < xs.length; i++) {        if (!f(xs[i])(ys[i])) return false;      }      return true;    };  };};
function unsafeCompareImpl(lt) {  return function(eq) {    return function(gt) {      return function(x) {        return function(y) {          return x < y ? lt : x > y ? gt : eq;        };      };    };  };};
function numShl(n1) {  return function(n2) {    return n1 << n2;  };};
function numShr(n1) {  return function(n2) {    return n1 >> n2;  };};
function numZshr(n1) {  return function(n2) {    return n1 >>> n2;  };};
function numAnd(n1) {  return function(n2) {    return n1 & n2;  };};
function numOr(n1) {  return function(n2) {    return n1 | n2;  };};
function numXor(n1) {  return function(n2) {    return n1 ^ n2;  };};
function numComplement(n) {  return ~n;};
function boolAnd(b1) {  return function(b2) {    return b1 && b2;  };};
function boolOr(b1) {  return function(b2) {    return b1 || b2;  };};
function boolNot(b) {  return !b;};
function concatString(s1) {  return function(s2) {    return s1 + s2;  };};
var $bar$bar = function (dict) {
    return dict["||"];
};
var $greater$greater$eq = function (dict) {
    return dict[">>="];
};
var $eq$eq = function (dict) {
    return dict["=="];
};
var $less$greater = function (dict) {
    return dict["<>"];
};
var $less$less$less = function (dict) {
    return dict["<<<"];
};
var $greater$greater$greater = function (__dict_Semigroupoid_0) {
    return function (f) {
        return function (g) {
            return $less$less$less(__dict_Semigroupoid_0)(g)(f);
        };
    };
};
var $less$times$greater = function (dict) {
    return dict["<*>"];
};
var $less$dollar$greater = function (dict) {
    return dict["<$>"];
};
var $less$hash$greater = function (__dict_Functor_1) {
    return function (fa) {
        return function (f) {
            return $less$dollar$greater(__dict_Functor_1)(f)(fa);
        };
    };
};
var $colon = cons;
var $div$eq = function (dict) {
    return dict["/="];
};
var $div = function (dict) {
    return dict["/"];
};
var $dot$bar$dot = function (dict) {
    return dict[".|."];
};
var $dot$up$dot = function (dict) {
    return dict[".^."];
};
var $dot$amp$dot = function (dict) {
    return dict[".&."];
};
var $minus = function (dict) {
    return dict["-"];
};
var $plus$plus = function (__dict_Semigroup_2) {
    return $less$greater(__dict_Semigroup_2);
};
var $plus = function (dict) {
    return dict["+"];
};
var $times = function (dict) {
    return dict["*"];
};
var $amp$amp = function (dict) {
    return dict["&&"];
};
var $percent = function (dict) {
    return dict["%"];
};
var $dollar = function (f) {
    return function (x) {
        return f(x);
    };
};
var $hash = function (x) {
    return function (f) {
        return f(x);
    };
};
var zshr = function (dict) {
    return dict.zshr;
};
var unsafeCompare = unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
var unit = {};
var shr = function (dict) {
    return dict.shr;
};
var showUnit = new Show(function (_7) {
    return "Unit {}";
});
var showString = new Show(showStringImpl);
var showOrdering = new Show(function (_15) {
    if (_15 instanceof LT) {
        return "LT";
    };
    if (_15 instanceof GT) {
        return "GT";
    };
    if (_15 instanceof EQ) {
        return "EQ";
    };
    throw new Error("Failed pattern match");
});
var showNumber = new Show(showNumberImpl);
var showBoolean = new Show(function (_8) {
    if (_8) {
        return "true";
    };
    if (!_8) {
        return "false";
    };
    throw new Error("Failed pattern match");
});
var show = function (dict) {
    return dict.show;
};
var showArray = function (__dict_Show_3) {
    return new Show(showArrayImpl(show(__dict_Show_3)));
};
var shl = function (dict) {
    return dict.shl;
};
var semigroupoidArr = new Semigroupoid(function (f) {
    return function (g) {
        return function (x) {
            return f(g(x));
        };
    };
});
var semigroupUnit = new Semigroup(function (_22) {
    return function (_23) {
        return {};
    };
});
var semigroupString = new Semigroup(concatString);
var semigroupArr = function (__dict_Semigroup_4) {
    return new Semigroup(function (f) {
        return function (g) {
            return function (x) {
                return $less$greater(__dict_Semigroup_4)(f(x))(g(x));
            };
        };
    });
};
var pure = function (dict) {
    return dict.pure;
};
var $$return = function (__dict_Monad_5) {
    return pure(__dict_Monad_5["__superclass_Prelude.Applicative_0"]());
};
var otherwise = true;
var numNumber = new Num(numMod, numMul, numAdd, numSub, numDiv, numNegate);
var not = function (dict) {
    return dict.not;
};
var negate = function (dict) {
    return dict.negate;
};
var liftM1 = function (__dict_Monad_6) {
    return function (f) {
        return function (a) {
            return $greater$greater$eq(__dict_Monad_6["__superclass_Prelude.Bind_1"]())(a)(function (_0) {
                return $$return(__dict_Monad_6)(f(_0));
            });
        };
    };
};
var liftA1 = function (__dict_Applicative_7) {
    return function (f) {
        return function (a) {
            return $less$times$greater(__dict_Applicative_7["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_7)(f))(a);
        };
    };
};
var id = function (dict) {
    return dict.id;
};
var functorArr = new Functor($less$less$less(semigroupoidArr));
var flip = function (f) {
    return function (b) {
        return function (a) {
            return f(a)(b);
        };
    };
};
var eqUnit = new Eq(function (_11) {
    return function (_12) {
        return false;
    };
}, function (_9) {
    return function (_10) {
        return true;
    };
});
var ordUnit = new Ord(function () {
    return eqUnit;
}, function (_16) {
    return function (_17) {
        return EQ.value;
    };
});
var eqString = new Eq(refIneq, refEq);
var ordString = new Ord(function () {
    return eqString;
}, unsafeCompare);
var eqNumber = new Eq(refIneq, refEq);
var ordNumber = new Ord(function () {
    return eqNumber;
}, unsafeCompare);
var eqBoolean = new Eq(refIneq, refEq);
var ordBoolean = new Ord(function () {
    return eqBoolean;
}, function (_18) {
    return function (_19) {
        if (!_18 && !_19) {
            return EQ.value;
        };
        if (!_18 && _19) {
            return LT.value;
        };
        if (_18 && _19) {
            return EQ.value;
        };
        if (_18 && !_19) {
            return GT.value;
        };
        throw new Error("Failed pattern match");
    };
});
var $$const = function (_3) {
    return function (_4) {
        return _3;
    };
};
var $$void = function (__dict_Functor_9) {
    return function (fa) {
        return $less$dollar$greater(__dict_Functor_9)($$const(unit))(fa);
    };
};
var complement = function (dict) {
    return dict.complement;
};
var compare = function (dict) {
    return dict.compare;
};
var $less = function (__dict_Ord_11) {
    return function (a1) {
        return function (a2) {
            var _45 = compare(__dict_Ord_11)(a1)(a2);
            if (_45 instanceof LT) {
                return true;
            };
            return false;
        };
    };
};
var $less$eq = function (__dict_Ord_12) {
    return function (a1) {
        return function (a2) {
            var _46 = compare(__dict_Ord_12)(a1)(a2);
            if (_46 instanceof GT) {
                return false;
            };
            return true;
        };
    };
};
var $greater = function (__dict_Ord_13) {
    return function (a1) {
        return function (a2) {
            var _47 = compare(__dict_Ord_13)(a1)(a2);
            if (_47 instanceof GT) {
                return true;
            };
            return false;
        };
    };
};
var $greater$eq = function (__dict_Ord_14) {
    return function (a1) {
        return function (a2) {
            var _48 = compare(__dict_Ord_14)(a1)(a2);
            if (_48 instanceof LT) {
                return false;
            };
            return true;
        };
    };
};
var categoryArr = new Category(function () {
    return semigroupoidArr;
}, function (x) {
    return x;
});
var boolLikeBoolean = new BoolLike(boolAnd, boolNot, boolOr);
var eqArray = function (__dict_Eq_8) {
    return new Eq(function (xs) {
        return function (ys) {
            return not(boolLikeBoolean)($eq$eq(eqArray(__dict_Eq_8))(xs)(ys));
        };
    }, function (xs) {
        return function (ys) {
            return eqArrayImpl($eq$eq(__dict_Eq_8))(xs)(ys);
        };
    });
};
var ordArray = function (__dict_Ord_10) {
    return new Ord(function () {
        return eqArray(__dict_Ord_10["__superclass_Prelude.Eq_0"]());
    }, function (_20) {
        return function (_21) {
            if (_20.length === 0 && _21.length === 0) {
                return EQ.value;
            };
            if (_20.length === 0) {
                return LT.value;
            };
            if (_21.length === 0) {
                return GT.value;
            };
            if (_20.length >= 1) {
                var _55 = _20.slice(1);
                if (_21.length >= 1) {
                    var _53 = _21.slice(1);
                    var _51 = compare(__dict_Ord_10)(_20[0])(_21[0]);
                    if (_51 instanceof EQ) {
                        return compare(ordArray(__dict_Ord_10))(_55)(_53);
                    };
                    return _51;
                };
            };
            throw new Error("Failed pattern match");
        };
    });
};
var eqOrdering = new Eq(function (x) {
    return function (y) {
        return not(boolLikeBoolean)($eq$eq(eqOrdering)(x)(y));
    };
}, function (_13) {
    return function (_14) {
        if (_13 instanceof LT && _14 instanceof LT) {
            return true;
        };
        if (_13 instanceof GT && _14 instanceof GT) {
            return true;
        };
        if (_13 instanceof EQ && _14 instanceof EQ) {
            return true;
        };
        return false;
    };
});
var bitsNumber = new Bits(numAnd, numXor, numOr, numComplement, numShl, numShr, numZshr);
var asTypeOf = function (_5) {
    return function (_6) {
        return _5;
    };
};
var applyArr = new Apply(function (f) {
    return function (g) {
        return function (x) {
            return f(x)(g(x));
        };
    };
}, function () {
    return functorArr;
});
var bindArr = new Bind(function (m) {
    return function (f) {
        return function (x) {
            return f(m(x))(x);
        };
    };
}, function () {
    return applyArr;
});
var applicativeArr = new Applicative(function () {
    return applyArr;
}, $$const);
var monadArr = new Monad(function () {
    return applicativeArr;
}, function () {
    return bindArr;
});
var ap = function (__dict_Monad_15) {
    return function (f) {
        return function (a) {
            return $greater$greater$eq(__dict_Monad_15["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                return $greater$greater$eq(__dict_Monad_15["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                    return $$return(__dict_Monad_15)(_2(_1));
                });
            });
        };
    };
};
module.exports = {
    "#": $hash, 
    "$": $dollar, 
    "%": $percent, 
    "&&": $amp$amp, 
    "*": $times, 
    "+": $plus, 
    "++": $plus$plus, 
    "-": $minus, 
    ".&.": $dot$amp$dot, 
    ".^.": $dot$up$dot, 
    ".|.": $dot$bar$dot, 
    "/": $div, 
    "/=": $div$eq, 
    ":": $colon, 
    "<": $less, 
    "<#>": $less$hash$greater, 
    "<$>": $less$dollar$greater, 
    "<*>": $less$times$greater, 
    "<<<": $less$less$less, 
    "<=": $less$eq, 
    "<>": $less$greater, 
    "==": $eq$eq, 
    ">": $greater, 
    ">=": $greater$eq, 
    ">>=": $greater$greater$eq, 
    ">>>": $greater$greater$greater, 
    Applicative: Applicative, 
    Apply: Apply, 
    Bind: Bind, 
    Bits: Bits, 
    BoolLike: BoolLike, 
    Category: Category, 
    EQ: EQ, 
    Eq: Eq, 
    Functor: Functor, 
    GT: GT, 
    LT: LT, 
    Monad: Monad, 
    Num: Num, 
    Ord: Ord, 
    Semigroup: Semigroup, 
    Semigroupoid: Semigroupoid, 
    Show: Show, 
    Unit: Unit, 
    ap: ap, 
    applicativeArr: applicativeArr, 
    applyArr: applyArr, 
    asTypeOf: asTypeOf, 
    bindArr: bindArr, 
    bitsNumber: bitsNumber, 
    boolLikeBoolean: boolLikeBoolean, 
    categoryArr: categoryArr, 
    compare: compare, 
    complement: complement, 
    cons: cons, 
    "const": $$const, 
    eqArray: eqArray, 
    eqBoolean: eqBoolean, 
    eqNumber: eqNumber, 
    eqOrdering: eqOrdering, 
    eqString: eqString, 
    eqUnit: eqUnit, 
    flip: flip, 
    functorArr: functorArr, 
    id: id, 
    liftA1: liftA1, 
    liftM1: liftM1, 
    monadArr: monadArr, 
    negate: negate, 
    not: not, 
    numNumber: numNumber, 
    ordArray: ordArray, 
    ordBoolean: ordBoolean, 
    ordNumber: ordNumber, 
    ordString: ordString, 
    ordUnit: ordUnit, 
    otherwise: otherwise, 
    pure: pure, 
    refEq: refEq, 
    refIneq: refIneq, 
    "return": $$return, 
    semigroupArr: semigroupArr, 
    semigroupString: semigroupString, 
    semigroupUnit: semigroupUnit, 
    semigroupoidArr: semigroupoidArr, 
    shl: shl, 
    show: show, 
    showArray: showArray, 
    showBoolean: showBoolean, 
    showNumber: showNumber, 
    showOrdering: showOrdering, 
    showString: showString, 
    showUnit: showUnit, 
    shr: shr, 
    unit: unit, 
    "void": $$void, 
    zshr: zshr, 
    "||": $bar$bar
};

},{}],13:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var Thermite_Internal = require("Thermite.Internal");
var Control_Monad_Eff = require("Control.Monad.Eff");
function GetState(value0) {
    this.value0 = value0;
};
GetState.create = function (value0) {
    return new GetState(value0);
};
function SetState(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
};
SetState.create = function (value0) {
    return function (value1) {
        return new SetState(value0, value1);
    };
};
function Wait(value0) {
    this.value0 = value0;
};
Wait.create = function (value0) {
    return new Wait(value0);
};
function Pure(value0) {
    this.value0 = value0;
};
Pure.create = function (value0) {
    return new Pure(value0);
};
function Impure(value0) {
    this.value0 = value0;
};
Impure.create = function (value0) {
    return new Impure(value0);
};
var setState = function (s) {
    return Impure.create(new SetState(s, new Pure(Prelude.unit)));
};
var runAction = function (ctx) {
    var go = function (_38) {
        if (_38 instanceof Pure) {
            return Prelude["return"](Control_Monad_Eff.monadEff)(Prelude.unit);
        };
        if (_38 instanceof Impure && _38.value0 instanceof GetState) {
            return Prelude["void"](Control_Monad_Eff.functorEff)(function __do() {
                var _2 = Thermite_Internal.getStateImpl(ctx)();
                return go(_38.value0.value0(_2))();
            });
        };
        if (_38 instanceof Impure && _38.value0 instanceof SetState) {
            return Prelude["void"](Control_Monad_Eff.functorEff)(function __do() {
                Thermite_Internal.setStateImpl(ctx)(_38.value0.value0)();
                return go(_38.value0.value1)();
            });
        };
        if (_38 instanceof Impure && _38.value0 instanceof Wait) {
            return _38.value0.value0(go);
        };
        throw new Error("Failed pattern match");
    };
    return go;
};
var getState = Impure.create(new GetState(Pure.create));
var functorActionF = new Prelude.Functor(function (_36) {
    return function (_37) {
        if (_37 instanceof GetState) {
            return new GetState(Prelude["<<<"](Prelude.semigroupoidArr)(_36)(_37.value0));
        };
        if (_37 instanceof SetState) {
            return new SetState(_37.value0, _36(_37.value1));
        };
        if (_37 instanceof Wait) {
            return new Wait(function (k_1) {
                return _37.value0(Prelude["<<<"](Prelude.semigroupoidArr)(k_1)(_36));
            });
        };
        throw new Error("Failed pattern match");
    };
});
var functorAction = new Prelude.Functor(function (_39) {
    return function (_40) {
        if (_40 instanceof Pure) {
            return new Pure(_39(_40.value0));
        };
        if (_40 instanceof Impure) {
            return new Impure(Prelude["<$>"](functorActionF)(Prelude["<$>"](functorAction)(_39))(_40.value0));
        };
        throw new Error("Failed pattern match");
    };
});
var async = function (c) {
    return Impure.create(new Wait(function (k) {
        return c(Prelude["<<<"](Prelude.semigroupoidArr)(k)(Pure.create));
    }));
};
var sync = function (e) {
    return async(Prelude[">>="](Control_Monad_Eff.bindEff)(e));
};
var monadAction = new Prelude.Monad(function () {
    return applicativeAction;
}, function () {
    return bindAction;
});
var bindAction = new Prelude.Bind(function (_41) {
    return function (_42) {
        if (_41 instanceof Pure) {
            return _42(_41.value0);
        };
        if (_41 instanceof Impure) {
            return Impure.create(Prelude["<#>"](functorActionF)(_41.value0)(function (a_1) {
                return Prelude[">>="](bindAction)(a_1)(_42);
            }));
        };
        throw new Error("Failed pattern match");
    };
}, function () {
    return applyAction;
});
var applyAction = new Prelude.Apply(Prelude.ap(monadAction), function () {
    return functorAction;
});
var applicativeAction = new Prelude.Applicative(function () {
    return applyAction;
}, Pure.create);
var asyncSetState = function (c) {
    return Prelude[">>="](bindAction)(async(c))(function (_4) {
        return setState(_4);
    });
};
var modifyState = function (f) {
    return Prelude[">>="](bindAction)(getState)(function (_3) {
        return setState(f(_3));
    });
};
module.exports = {
    applicativeAction: applicativeAction, 
    applyAction: applyAction, 
    async: async, 
    asyncSetState: asyncSetState, 
    bindAction: bindAction, 
    functorAction: functorAction, 
    getState: getState, 
    modifyState: modifyState, 
    monadAction: monadAction, 
    runAction: runAction, 
    setState: setState, 
    sync: sync
};

},{"Control.Monad.Eff":6,"Prelude":12,"Thermite.Internal":18}],14:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Thermite_Internal = require("Thermite.Internal");
var Prelude = require("Prelude");
var onWheel = Thermite_Internal.event("onTouchCancel");
var onTouchStart = Thermite_Internal.event("onTouchStart");
var onTouchMove = Thermite_Internal.event("onTouchMove");
var onTouchEnd = Thermite_Internal.event("onTouchEnd");
var onTouchCancel = Thermite_Internal.event("onTouchCancel");
var onSubmit = Thermite_Internal.event("onSubmit");
var onScroll = Thermite_Internal.event("onScroll");
var onPaste = Thermite_Internal.event("onPaste");
var onMouseUp = Thermite_Internal.event("onMouseUp");
var onMouseOver = Thermite_Internal.event("onMouseOver");
var onMouseOut = Thermite_Internal.event("onMouseOut");
var onMouseMove = Thermite_Internal.event("onMouseMove");
var onMouseLeave = Thermite_Internal.event("onMouseLeave");
var onMouseEnter = Thermite_Internal.event("onMouseEnter");
var onMouseDown = Thermite_Internal.event("onMouseDown");
var onKeyUp = Thermite_Internal.event("onKeyUp");
var onKeyPress = Thermite_Internal.event("onKeyPress");
var onKeyDown = Thermite_Internal.event("onKeyDown");
var onInput = Thermite_Internal.event("onInput");
var onFocus = Thermite_Internal.event("onFocus");
var onDrop = Thermite_Internal.event("onDrop");
var onDragStart = Thermite_Internal.event("onDragStart");
var onDragOver = Thermite_Internal.event("onDragOver");
var onDragLeave = Thermite_Internal.event("onDragLeave");
var onDragExit = Thermite_Internal.event("onDragExit");
var onDragEnter = Thermite_Internal.event("onDragEnter");
var onDragEnd = Thermite_Internal.event("onDragEnd");
var onDrag = Thermite_Internal.event("onDrag");
var onDoubleClick = Thermite_Internal.event("onDoubleClick");
var onCut = Thermite_Internal.event("onCut");
var onCopy = Thermite_Internal.event("onCopy");
var onClick = Thermite_Internal.event("onClick");
var onChange = Thermite_Internal.event("onChange");
var onBlur = Thermite_Internal.event("onBlur");
module.exports = {
    onBlur: onBlur, 
    onChange: onChange, 
    onClick: onClick, 
    onCopy: onCopy, 
    onCut: onCut, 
    onDoubleClick: onDoubleClick, 
    onDrag: onDrag, 
    onDragEnd: onDragEnd, 
    onDragEnter: onDragEnter, 
    onDragExit: onDragExit, 
    onDragLeave: onDragLeave, 
    onDragOver: onDragOver, 
    onDragStart: onDragStart, 
    onDrop: onDrop, 
    onFocus: onFocus, 
    onInput: onInput, 
    onKeyDown: onKeyDown, 
    onKeyPress: onKeyPress, 
    onKeyUp: onKeyUp, 
    onMouseDown: onMouseDown, 
    onMouseEnter: onMouseEnter, 
    onMouseLeave: onMouseLeave, 
    onMouseMove: onMouseMove, 
    onMouseOut: onMouseOut, 
    onMouseOver: onMouseOver, 
    onMouseUp: onMouseUp, 
    onPaste: onPaste, 
    onScroll: onScroll, 
    onSubmit: onSubmit, 
    onTouchCancel: onTouchCancel, 
    onTouchEnd: onTouchEnd, 
    onTouchMove: onTouchMove, 
    onTouchStart: onTouchStart, 
    onWheel: onWheel
};

},{"Prelude":12,"Thermite.Internal":18}],15:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Thermite_Internal = require("Thermite.Internal");
var Prelude = require("Prelude");
var wmode = Thermite_Internal.unsafeAttribute("wmode");
var width = Thermite_Internal.unsafeAttribute("width");
var value = Thermite_Internal.unsafeAttribute("value");
var useMap = Thermite_Internal.unsafeAttribute("useMap");
var title = Thermite_Internal.unsafeAttribute("title");
var target = Thermite_Internal.unsafeAttribute("target");
var tabIndex = Thermite_Internal.unsafeAttribute("tabIndex");
var step = Thermite_Internal.unsafeAttribute("step");
var start = Thermite_Internal.unsafeAttribute("start");
var srcSet = Thermite_Internal.unsafeAttribute("srcSet");
var srcDoc = Thermite_Internal.unsafeAttribute("srcDoc");
var src = Thermite_Internal.unsafeAttribute("src");
var spellCheck = Thermite_Internal.unsafeAttribute("spellCheck");
var span = Thermite_Internal.unsafeAttribute("span");
var sizes = Thermite_Internal.unsafeAttribute("sizes");
var size = Thermite_Internal.unsafeAttribute("size");
var shape = Thermite_Internal.unsafeAttribute("shape");
var selected = Thermite_Internal.unsafeAttribute("selected");
var seamless = Thermite_Internal.unsafeAttribute("seamless");
var scrolling = Thermite_Internal.unsafeAttribute("scrolling");
var scope = Thermite_Internal.unsafeAttribute("scope");
var sandbox = Thermite_Internal.unsafeAttribute("sandbox");
var rows = Thermite_Internal.unsafeAttribute("rows");
var rowSpan = Thermite_Internal.unsafeAttribute("rowSpan");
var role = Thermite_Internal.unsafeAttribute("role");
var required = Thermite_Internal.unsafeAttribute("required");
var rel = Thermite_Internal.unsafeAttribute("rel");
var readOnly = Thermite_Internal.unsafeAttribute("readOnly");
var radioGroup = Thermite_Internal.unsafeAttribute("radioGroup");
var preload = Thermite_Internal.unsafeAttribute("preload");
var poster = Thermite_Internal.unsafeAttribute("poster");
var placeholder = Thermite_Internal.unsafeAttribute("placeholder");
var pattern = Thermite_Internal.unsafeAttribute("pattern");
var open = Thermite_Internal.unsafeAttribute("open");
var noValidate = Thermite_Internal.unsafeAttribute("noValidate");
var name = Thermite_Internal.unsafeAttribute("name");
var muted = Thermite_Internal.unsafeAttribute("muted");
var multiple = Thermite_Internal.unsafeAttribute("multiple");
var min = Thermite_Internal.unsafeAttribute("min");
var method = Thermite_Internal.unsafeAttribute("method");
var mediaGroup = Thermite_Internal.unsafeAttribute("mediaGroup");
var media = Thermite_Internal.unsafeAttribute("media");
var maxLength = Thermite_Internal.unsafeAttribute("maxLength");
var max = Thermite_Internal.unsafeAttribute("max");
var marginWidth = Thermite_Internal.unsafeAttribute("marginWidth");
var marginHeight = Thermite_Internal.unsafeAttribute("marginHeight");
var manifest = Thermite_Internal.unsafeAttribute("manifest");
var loop = Thermite_Internal.unsafeAttribute("loop");
var list = Thermite_Internal.unsafeAttribute("list");
var lang = Thermite_Internal.unsafeAttribute("lang");
var label = Thermite_Internal.unsafeAttribute("label");
var icon = Thermite_Internal.unsafeAttribute("icon");
var httpEquiv = Thermite_Internal.unsafeAttribute("httpEquiv");
var htmlFor = Thermite_Internal.unsafeAttribute("htmlFor");
var hrefLang = Thermite_Internal.unsafeAttribute("hrefLang");
var href = Thermite_Internal.unsafeAttribute("href");
var hidden = Thermite_Internal.unsafeAttribute("hidden");
var height = Thermite_Internal.unsafeAttribute("height");
var frameBorder = Thermite_Internal.unsafeAttribute("frameBorder");
var formTarget = Thermite_Internal.unsafeAttribute("formTarget");
var formNoValidate = Thermite_Internal.unsafeAttribute("formNoValidate");
var formMethod = Thermite_Internal.unsafeAttribute("formMethod");
var formEncType = Thermite_Internal.unsafeAttribute("formEncType");
var formAction = Thermite_Internal.unsafeAttribute("formAction");
var form = Thermite_Internal.unsafeAttribute("form");
var encType = Thermite_Internal.unsafeAttribute("encType");
var draggable = Thermite_Internal.unsafeAttribute("draggable");
var download = Thermite_Internal.unsafeAttribute("download");
var disabled = Thermite_Internal.unsafeAttribute("disabled");
var dir = Thermite_Internal.unsafeAttribute("dir");
var defer = Thermite_Internal.unsafeAttribute("defer");
var dateTime = Thermite_Internal.unsafeAttribute("dateTime");
var crossOrigin = Thermite_Internal.unsafeAttribute("crossOrigin");
var coords = Thermite_Internal.unsafeAttribute("coords");
var controls = Thermite_Internal.unsafeAttribute("controls");
var contextMenu = Thermite_Internal.unsafeAttribute("contextMenu");
var contentEditable = Thermite_Internal.unsafeAttribute("contentEditable");
var content = Thermite_Internal.unsafeAttribute("content");
var cols = Thermite_Internal.unsafeAttribute("cols");
var colSpan = Thermite_Internal.unsafeAttribute("colSpan");
var className = Thermite_Internal.unsafeAttribute("className");
var classID = Thermite_Internal.unsafeAttribute("classID");
var checked = Thermite_Internal.unsafeAttribute("checked");
var charSet = Thermite_Internal.unsafeAttribute("charSet");
var cellSpacing = Thermite_Internal.unsafeAttribute("cellSpacing");
var cellPadding = Thermite_Internal.unsafeAttribute("cellPadding");
var autoPlay = Thermite_Internal.unsafeAttribute("autoPlay");
var autoFocus = Thermite_Internal.unsafeAttribute("autoFocus");
var autoComplete = Thermite_Internal.unsafeAttribute("autoComplete");
var async = Thermite_Internal.unsafeAttribute("async");
var alt = Thermite_Internal.unsafeAttribute("alt");
var allowTransparency = Thermite_Internal.unsafeAttribute("allowTransparency");
var allowFullScreen = Thermite_Internal.unsafeAttribute("allowFullScreen");
var action = Thermite_Internal.unsafeAttribute("action");
var accessKey = Thermite_Internal.unsafeAttribute("accessKey");
var acceptCharset = Thermite_Internal.unsafeAttribute("acceptCharset");
var accept = Thermite_Internal.unsafeAttribute("accept");
var _type = Thermite_Internal.unsafeAttribute("type");
var _id = Thermite_Internal.unsafeAttribute("id");
module.exports = {
    _id: _id, 
    _type: _type, 
    accept: accept, 
    acceptCharset: acceptCharset, 
    accessKey: accessKey, 
    action: action, 
    allowFullScreen: allowFullScreen, 
    allowTransparency: allowTransparency, 
    alt: alt, 
    async: async, 
    autoComplete: autoComplete, 
    autoFocus: autoFocus, 
    autoPlay: autoPlay, 
    cellPadding: cellPadding, 
    cellSpacing: cellSpacing, 
    charSet: charSet, 
    checked: checked, 
    classID: classID, 
    className: className, 
    colSpan: colSpan, 
    cols: cols, 
    content: content, 
    contentEditable: contentEditable, 
    contextMenu: contextMenu, 
    controls: controls, 
    coords: coords, 
    crossOrigin: crossOrigin, 
    dateTime: dateTime, 
    defer: defer, 
    dir: dir, 
    disabled: disabled, 
    download: download, 
    draggable: draggable, 
    encType: encType, 
    form: form, 
    formAction: formAction, 
    formEncType: formEncType, 
    formMethod: formMethod, 
    formNoValidate: formNoValidate, 
    formTarget: formTarget, 
    frameBorder: frameBorder, 
    height: height, 
    hidden: hidden, 
    href: href, 
    hrefLang: hrefLang, 
    htmlFor: htmlFor, 
    httpEquiv: httpEquiv, 
    icon: icon, 
    label: label, 
    lang: lang, 
    list: list, 
    loop: loop, 
    manifest: manifest, 
    marginHeight: marginHeight, 
    marginWidth: marginWidth, 
    max: max, 
    maxLength: maxLength, 
    media: media, 
    mediaGroup: mediaGroup, 
    method: method, 
    min: min, 
    multiple: multiple, 
    muted: muted, 
    name: name, 
    noValidate: noValidate, 
    open: open, 
    pattern: pattern, 
    placeholder: placeholder, 
    poster: poster, 
    preload: preload, 
    radioGroup: radioGroup, 
    readOnly: readOnly, 
    rel: rel, 
    required: required, 
    role: role, 
    rowSpan: rowSpan, 
    rows: rows, 
    sandbox: sandbox, 
    scope: scope, 
    scrolling: scrolling, 
    seamless: seamless, 
    selected: selected, 
    shape: shape, 
    size: size, 
    sizes: sizes, 
    span: span, 
    spellCheck: spellCheck, 
    src: src, 
    srcDoc: srcDoc, 
    srcSet: srcSet, 
    start: start, 
    step: step, 
    tabIndex: tabIndex, 
    target: target, 
    title: title, 
    useMap: useMap, 
    value: value, 
    width: width, 
    wmode: wmode
};

},{"Prelude":12,"Thermite.Internal":18}],16:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Thermite_Internal = require("Thermite.Internal");
var Prelude = require("Prelude");
var wbr = Thermite_Internal.createElementImpl("body");
var wbr$prime = wbr([  ]);
var video = Thermite_Internal.createElementImpl("video");
var video$prime = video([  ]);
var $$var = Thermite_Internal.createElementImpl("var");
var var$prime = $$var([  ]);
var ul = Thermite_Internal.createElementImpl("ul");
var ul$prime = ul([  ]);
var u = Thermite_Internal.createElementImpl("u");
var u$prime = u([  ]);
var track = Thermite_Internal.createElementImpl("track");
var track$prime = track([  ]);
var tr = Thermite_Internal.createElementImpl("tr");
var tr$prime = tr([  ]);
var title = Thermite_Internal.createElementImpl("title");
var title$prime = title([  ]);
var time = Thermite_Internal.createElementImpl("time");
var time$prime = time([  ]);
var thead = Thermite_Internal.createElementImpl("thead");
var thead$prime = thead([  ]);
var th = Thermite_Internal.createElementImpl("th");
var th$prime = th([  ]);
var tfoot = Thermite_Internal.createElementImpl("tfoot");
var tfoot$prime = tfoot([  ]);
var textarea = Thermite_Internal.createElementImpl("textarea");
var textarea$prime = textarea([  ]);
var td = Thermite_Internal.createElementImpl("td");
var td$prime = td([  ]);
var tbody = Thermite_Internal.createElementImpl("tbody");
var tbody$prime = tbody([  ]);
var table = Thermite_Internal.createElementImpl("table");
var table$prime = table([  ]);
var sup = Thermite_Internal.createElementImpl("sup");
var sup$prime = sup([  ]);
var summary = Thermite_Internal.createElementImpl("summary");
var summary$prime = summary([  ]);
var sub = Thermite_Internal.createElementImpl("sub");
var sub$prime = sub([  ]);
var style = Thermite_Internal.createElementImpl("style");
var style$prime = style([  ]);
var strong = Thermite_Internal.createElementImpl("strong");
var strong$prime = strong([  ]);
var span = Thermite_Internal.createElementImpl("span");
var span$prime = span([  ]);
var source = Thermite_Internal.createElementImpl("source");
var source$prime = source([  ]);
var small = Thermite_Internal.createElementImpl("small");
var small$prime = small([  ]);
var select = Thermite_Internal.createElementImpl("select");
var select$prime = select([  ]);
var section = Thermite_Internal.createElementImpl("section");
var section$prime = section([  ]);
var script = Thermite_Internal.createElementImpl("script");
var script$prime = script([  ]);
var samp = Thermite_Internal.createElementImpl("samp");
var samp$prime = samp([  ]);
var s = Thermite_Internal.createElementImpl("s");
var s$prime = s([  ]);
var ruby = Thermite_Internal.createElementImpl("ruby");
var ruby$prime = ruby([  ]);
var rt = Thermite_Internal.createElementImpl("rt");
var rt$prime = rt([  ]);
var rp = Thermite_Internal.createElementImpl("rp");
var rp$prime = rp([  ]);
var q = Thermite_Internal.createElementImpl("q");
var q$prime = q([  ]);
var progress = Thermite_Internal.createElementImpl("progress");
var progress$prime = progress([  ]);
var pre = Thermite_Internal.createElementImpl("pre");
var pre$prime = pre([  ]);
var picture = Thermite_Internal.createElementImpl("picture");
var picture$prime = picture([  ]);
var param = Thermite_Internal.createElementImpl("param");
var param$prime = param([  ]);
var p = Thermite_Internal.createElementImpl("p");
var p$prime = p([  ]);
var output = Thermite_Internal.createElementImpl("output");
var output$prime = output([  ]);
var option = Thermite_Internal.createElementImpl("option");
var option$prime = option([  ]);
var optgroup = Thermite_Internal.createElementImpl("optgroup");
var optgroup$prime = optgroup([  ]);
var ol = Thermite_Internal.createElementImpl("ol");
var ol$prime = ol([  ]);
var object = Thermite_Internal.createElementImpl("object");
var object$prime = object([  ]);
var noscript = Thermite_Internal.createElementImpl("noscript");
var noscript$prime = noscript([  ]);
var nav = Thermite_Internal.createElementImpl("nav");
var nav$prime = nav([  ]);
var meter = Thermite_Internal.createElementImpl("meter");
var meter$prime = meter([  ]);
var meta = Thermite_Internal.createElementImpl("meta");
var meta$prime = meta([  ]);
var menuitem = Thermite_Internal.createElementImpl("menuitem");
var menuitem$prime = menuitem([  ]);
var menu = Thermite_Internal.createElementImpl("menu");
var menu$prime = menu([  ]);
var mark = Thermite_Internal.createElementImpl("mark");
var mark$prime = mark([  ]);
var map = Thermite_Internal.createElementImpl("map");
var map$prime = map([  ]);
var main = Thermite_Internal.createElementImpl("main");
var main$prime = main([  ]);
var link = Thermite_Internal.createElementImpl("link");
var li = Thermite_Internal.createElementImpl("li");
var li$prime = li([  ]);
var legend = Thermite_Internal.createElementImpl("legend");
var legend$prime = legend([  ]);
var label = Thermite_Internal.createElementImpl("label");
var label$prime = label([  ]);
var keygen = Thermite_Internal.createElementImpl("keygen");
var keygen$prime = keygen([  ]);
var kbd = Thermite_Internal.createElementImpl("kbd");
var kbd$prime = kbd([  ]);
var ins = Thermite_Internal.createElementImpl("ins");
var ins$prime = ins([  ]);
var input = Thermite_Internal.createElementImpl("input");
var input$prime = input([  ]);
var img = Thermite_Internal.createElementImpl("img");
var img$prime = img([  ]);
var iframe = Thermite_Internal.createElementImpl("iframe");
var iframe$prime = iframe([  ]);
var i = Thermite_Internal.createElementImpl("i");
var i$prime = i([  ]);
var html = Thermite_Internal.createElementImpl("html");
var html$prime = html([  ]);
var hr = Thermite_Internal.createElementImpl("hr");
var hr$prime = hr([  ]);
var header = Thermite_Internal.createElementImpl("header");
var header$prime = header([  ]);
var head = Thermite_Internal.createElementImpl("head");
var head$prime = head([  ]);
var h6 = Thermite_Internal.createElementImpl("h6");
var h6$prime = h6([  ]);
var h5 = Thermite_Internal.createElementImpl("h5");
var h5$prime = h5([  ]);
var h4 = Thermite_Internal.createElementImpl("h4");
var h4$prime = h4([  ]);
var h3 = Thermite_Internal.createElementImpl("h3");
var h3$prime = h3([  ]);
var h2 = Thermite_Internal.createElementImpl("h2");
var h2$prime = h2([  ]);
var h1 = Thermite_Internal.createElementImpl("h1");
var h1$prime = h1([  ]);
var form = Thermite_Internal.createElementImpl("form");
var form$prime = form([  ]);
var footer = Thermite_Internal.createElementImpl("footer");
var footer$prime = footer([  ]);
var figure = Thermite_Internal.createElementImpl("figure");
var figure$prime = figure([  ]);
var figcaption = Thermite_Internal.createElementImpl("figcaption");
var figcaption$prime = figcaption([  ]);
var fieldset = Thermite_Internal.createElementImpl("fieldset");
var fieldset$prime = fieldset([  ]);
var embed = Thermite_Internal.createElementImpl("embed");
var embed$prime = embed([  ]);
var em = Thermite_Internal.createElementImpl("em");
var em$prime = em([  ]);
var dt = Thermite_Internal.createElementImpl("dt");
var dt$prime = dt([  ]);
var dl = Thermite_Internal.createElementImpl("dl");
var dl$prime = dl([  ]);
var div = Thermite_Internal.createElementImpl("div");
var div$prime = div([  ]);
var dialog = Thermite_Internal.createElementImpl("dialog");
var dialog$prime = dialog([  ]);
var dfn = Thermite_Internal.createElementImpl("dfn");
var dfn$prime = dfn([  ]);
var details = Thermite_Internal.createElementImpl("details");
var details$prime = details([  ]);
var del = Thermite_Internal.createElementImpl("del");
var del$prime = del([  ]);
var dd = Thermite_Internal.createElementImpl("dd");
var dd$prime = dd([  ]);
var datalist = Thermite_Internal.createElementImpl("datalist");
var datalist$prime = datalist([  ]);
var colgroup = Thermite_Internal.createElementImpl("colgroup");
var colgroup$prime = colgroup([  ]);
var col = Thermite_Internal.createElementImpl("col");
var col$prime = col([  ]);
var code = Thermite_Internal.createElementImpl("code");
var code$prime = code([  ]);
var cite = Thermite_Internal.createElementImpl("cite");
var cite$prime = cite([  ]);
var caption = Thermite_Internal.createElementImpl("caption");
var caption$prime = caption([  ]);
var canvas = Thermite_Internal.createElementImpl("canvas");
var canvas$prime = canvas([  ]);
var button = Thermite_Internal.createElementImpl("button");
var button$prime = button([  ]);
var br = Thermite_Internal.createElementImpl("br");
var br$prime = br([  ]);
var body = Thermite_Internal.createElementImpl("body");
var body$prime = body([  ]);
var link$prime = body([  ]);
var blockquote = Thermite_Internal.createElementImpl("blockquote");
var blockquote$prime = blockquote([  ]);
var big = Thermite_Internal.createElementImpl("big");
var big$prime = big([  ]);
var bdo = Thermite_Internal.createElementImpl("bdo");
var bdo$prime = bdo([  ]);
var bdi = Thermite_Internal.createElementImpl("bdi");
var bdi$prime = bdi([  ]);
var base = Thermite_Internal.createElementImpl("base");
var base$prime = base([  ]);
var b = Thermite_Internal.createElementImpl("b");
var b$prime = b([  ]);
var audio = Thermite_Internal.createElementImpl("audio");
var audio$prime = audio([  ]);
var aside = Thermite_Internal.createElementImpl("aside");
var aside$prime = aside([  ]);
var article = Thermite_Internal.createElementImpl("article");
var article$prime = article([  ]);
var area = Thermite_Internal.createElementImpl("area");
var area$prime = area([  ]);
var address = Thermite_Internal.createElementImpl("address");
var address$prime = address([  ]);
var abbr = Thermite_Internal.createElementImpl("abbr");
var abbr$prime = abbr([  ]);
var a = Thermite_Internal.createElementImpl("a");
var a$prime = a([  ]);
var _data = Thermite_Internal.createElementImpl("data");
var _data$prime = _data([  ]);
module.exports = {
    _data: _data, 
    "_data'": _data$prime, 
    a: a, 
    "a'": a$prime, 
    abbr: abbr, 
    "abbr'": abbr$prime, 
    address: address, 
    "address'": address$prime, 
    area: area, 
    "area'": area$prime, 
    article: article, 
    "article'": article$prime, 
    aside: aside, 
    "aside'": aside$prime, 
    audio: audio, 
    "audio'": audio$prime, 
    b: b, 
    "b'": b$prime, 
    base: base, 
    "base'": base$prime, 
    bdi: bdi, 
    "bdi'": bdi$prime, 
    bdo: bdo, 
    "bdo'": bdo$prime, 
    big: big, 
    "big'": big$prime, 
    blockquote: blockquote, 
    "blockquote'": blockquote$prime, 
    body: body, 
    "body'": body$prime, 
    br: br, 
    "br'": br$prime, 
    button: button, 
    "button'": button$prime, 
    canvas: canvas, 
    "canvas'": canvas$prime, 
    caption: caption, 
    "caption'": caption$prime, 
    cite: cite, 
    "cite'": cite$prime, 
    code: code, 
    "code'": code$prime, 
    col: col, 
    "col'": col$prime, 
    colgroup: colgroup, 
    "colgroup'": colgroup$prime, 
    datalist: datalist, 
    "datalist'": datalist$prime, 
    dd: dd, 
    "dd'": dd$prime, 
    del: del, 
    "del'": del$prime, 
    details: details, 
    "details'": details$prime, 
    dfn: dfn, 
    "dfn'": dfn$prime, 
    dialog: dialog, 
    "dialog'": dialog$prime, 
    div: div, 
    "div'": div$prime, 
    dl: dl, 
    "dl'": dl$prime, 
    dt: dt, 
    "dt'": dt$prime, 
    em: em, 
    "em'": em$prime, 
    embed: embed, 
    "embed'": embed$prime, 
    fieldset: fieldset, 
    "fieldset'": fieldset$prime, 
    figcaption: figcaption, 
    "figcaption'": figcaption$prime, 
    figure: figure, 
    "figure'": figure$prime, 
    footer: footer, 
    "footer'": footer$prime, 
    form: form, 
    "form'": form$prime, 
    h1: h1, 
    "h1'": h1$prime, 
    h2: h2, 
    "h2'": h2$prime, 
    h3: h3, 
    "h3'": h3$prime, 
    h4: h4, 
    "h4'": h4$prime, 
    h5: h5, 
    "h5'": h5$prime, 
    h6: h6, 
    "h6'": h6$prime, 
    head: head, 
    "head'": head$prime, 
    header: header, 
    "header'": header$prime, 
    hr: hr, 
    "hr'": hr$prime, 
    html: html, 
    "html'": html$prime, 
    i: i, 
    "i'": i$prime, 
    iframe: iframe, 
    "iframe'": iframe$prime, 
    img: img, 
    "img'": img$prime, 
    input: input, 
    "input'": input$prime, 
    ins: ins, 
    "ins'": ins$prime, 
    kbd: kbd, 
    "kbd'": kbd$prime, 
    keygen: keygen, 
    "keygen'": keygen$prime, 
    label: label, 
    "label'": label$prime, 
    legend: legend, 
    "legend'": legend$prime, 
    li: li, 
    "li'": li$prime, 
    link: link, 
    "link'": link$prime, 
    main: main, 
    "main'": main$prime, 
    map: map, 
    "map'": map$prime, 
    mark: mark, 
    "mark'": mark$prime, 
    menu: menu, 
    "menu'": menu$prime, 
    menuitem: menuitem, 
    "menuitem'": menuitem$prime, 
    meta: meta, 
    "meta'": meta$prime, 
    meter: meter, 
    "meter'": meter$prime, 
    nav: nav, 
    "nav'": nav$prime, 
    noscript: noscript, 
    "noscript'": noscript$prime, 
    object: object, 
    "object'": object$prime, 
    ol: ol, 
    "ol'": ol$prime, 
    optgroup: optgroup, 
    "optgroup'": optgroup$prime, 
    option: option, 
    "option'": option$prime, 
    output: output, 
    "output'": output$prime, 
    p: p, 
    "p'": p$prime, 
    param: param, 
    "param'": param$prime, 
    picture: picture, 
    "picture'": picture$prime, 
    pre: pre, 
    "pre'": pre$prime, 
    progress: progress, 
    "progress'": progress$prime, 
    q: q, 
    "q'": q$prime, 
    rp: rp, 
    "rp'": rp$prime, 
    rt: rt, 
    "rt'": rt$prime, 
    ruby: ruby, 
    "ruby'": ruby$prime, 
    s: s, 
    "s'": s$prime, 
    samp: samp, 
    "samp'": samp$prime, 
    script: script, 
    "script'": script$prime, 
    section: section, 
    "section'": section$prime, 
    select: select, 
    "select'": select$prime, 
    small: small, 
    "small'": small$prime, 
    source: source, 
    "source'": source$prime, 
    span: span, 
    "span'": span$prime, 
    strong: strong, 
    "strong'": strong$prime, 
    style: style, 
    "style'": style$prime, 
    sub: sub, 
    "sub'": sub$prime, 
    summary: summary, 
    "summary'": summary$prime, 
    sup: sup, 
    "sup'": sup$prime, 
    table: table, 
    "table'": table$prime, 
    tbody: tbody, 
    "tbody'": tbody$prime, 
    td: td, 
    "td'": td$prime, 
    textarea: textarea, 
    "textarea'": textarea$prime, 
    tfoot: tfoot, 
    "tfoot'": tfoot$prime, 
    th: th, 
    "th'": th$prime, 
    thead: thead, 
    "thead'": thead$prime, 
    time: time, 
    "time'": time$prime, 
    title: title, 
    "title'": title$prime, 
    tr: tr, 
    "tr'": tr$prime, 
    track: track, 
    "track'": track$prime, 
    u: u, 
    "u'": u$prime, 
    ul: ul, 
    "ul'": ul$prime, 
    "var": $$var, 
    "var'": var$prime, 
    video: video, 
    "video'": video$prime, 
    wbr: wbr, 
    "wbr'": wbr$prime
};

},{"Prelude":12,"Thermite.Internal":18}],17:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Thermite_Internal = require("Thermite.Internal");
var Prelude = require("Prelude");
var text = Thermite_Internal.textImpl;
var createElement = Thermite_Internal.createElementImpl;
module.exports = {
    createElement: createElement, 
    text: text
};

},{"Prelude":12,"Thermite.Internal":18}],18:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");

  function getStateImpl(ctx) {
    return function() {
      return ctx.state;
    };
  }
  ;

  function setStateImpl(ctx) {
    return function(state) {
      return function() {
        ctx.setState(state);
      };
    };
  }
  ;

  function textImpl(s) {
    return s;
  }
  ;

  function createElementImpl(name) {
    return function(ps) {
      return function(children) {
        var props = {};

        for (var i = 0; i < ps.length; i++) {
          var p = ps[i];
          props[p[0]] = p[1];
        }

        return React.createElement(name, props, children);
      };
    };
  }
  ;

  function unsafeAttribute(attr) {
    return function(value) {
      return [attr, value];
    };
  }
  ;

  function event(name) {
    return function(context) {
      return function(f) {
        return [name, function(e) {
          context.performAction(f(e));
        }];
      };
    };
  }
  ;

  function createClassImpl(runAction) {
    return function(maybe) {
      return function(spec) {
        return React.createClass({
          getInitialState: function() {
            return spec.initialState;
          },
          performAction: function(action) {
            runAction(this)(spec.performAction(this)(action))();
          },
          render: function() {
            return spec.render(this)(this.state)(this.props);
          },
          componentWillMount: function() {
            var self = this;
            maybe(function() { })(function(action) {
              return function() {
                self.performAction(action);
              };
            })(spec.componentWillMount)();
          },
          displayName: maybe(undefined)(function(a) { return a; })(spec.displayName)
        })
      };
    };
  }
  ;

  function renderImpl(component) {
    return function(props) {
      return function() {
        React.render(React.createElement(component, props), document.body);
      };
    };
  }
  ;
module.exports = {
    createClassImpl: createClassImpl, 
    createElementImpl: createElementImpl, 
    event: event, 
    getStateImpl: getStateImpl, 
    renderImpl: renderImpl, 
    setStateImpl: setStateImpl, 
    textImpl: textImpl, 
    unsafeAttribute: unsafeAttribute
};

},{"Prelude":12}],19:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var Spec = {
    create: function (value) {
        return value;
    }
};
module.exports = {
    Spec: Spec
};

},{"Prelude":12}],20:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Thermite_Internal = require("Thermite.Internal");
var Thermite_Action = require("Thermite.Action");
var Data_Maybe = require("Data.Maybe");
var Prelude = require("Prelude");
var Thermite_Types = require("Thermite.Types");
var simpleSpec = function (initialState) {
    return function (performAction) {
        return function (render_1) {
            return {
                initialState: initialState, 
                performAction: performAction, 
                render: render_1, 
                componentWillMount: Data_Maybe.Nothing.value, 
                displayName: Data_Maybe.Nothing.value
            };
        };
    };
};
var render = Thermite_Internal.renderImpl;
var displayName = function (_45) {
    return function (_46) {
        var _127 = {};
        for (var _128 in _46) {
            if (_46.hasOwnProperty(_128)) {
                _127[_128] = _46[_128];
            };
        };
        _127.displayName = new Data_Maybe.Just(_45);
        return _127;
    };
};
var createClass = Thermite_Internal.createClassImpl(Thermite_Action.runAction)(Data_Maybe.maybe);
var componentWillMount = function (_43) {
    return function (_44) {
        var _131 = {};
        for (var _132 in _44) {
            if (_44.hasOwnProperty(_132)) {
                _131[_132] = _44[_132];
            };
        };
        _131.componentWillMount = new Data_Maybe.Just(_43);
        return _131;
    };
};
module.exports = {
    componentWillMount: componentWillMount, 
    createClass: createClass, 
    displayName: displayName, 
    render: render, 
    simpleSpec: simpleSpec
};

},{"Data.Maybe":9,"Prelude":12,"Thermite.Action":13,"Thermite.Internal":18,"Thermite.Types":19}],21:[function(require,module,exports){
require('Main').main();

},{"Main":11}]},{},[21]);
